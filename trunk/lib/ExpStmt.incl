include utils.incl
<*
   POET : Parameterized Optimizations for Empirical Tuning
   Copyright (c)  2008,  Qing Yi.  All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 3. Neither the name of UTSA nor the names of its contributors may be used to
    endorse or promote products derived from this software without specific
    prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISEDOF THE POSSIBILITY OF SUCH DAMAGE.
*>

<*******
parsing of floating point numbers
********>

<code Int pars=(sign : "+"|"-"|"", val : INT) 
           rebuild=((sign == "")? val : Int#(sign,val))> 
@sign val@ </code>

<code EXPO pars=(base: FLOAT|INT, expo: CODE.Int|INT)  
             parse=FALSE> @base@e@expo@ </code>

<code DOUBLE pars=(base: FLOAT|INT, expo: CODE.Int|STRING) 
             parse=FALSE> @base@d@expo@ </code>
<*******
Type Processing
********>
<code TAG pars=(tag:STRING,t)> @t@ </code>
<code PtrType pars=(base) /> 
<code RefType pars=(base) /> 
<code ArrayType pars=(base, dim) /> 
<code FunctionType pars=(params,ret) /> 
<code CastExp pars=(t : CODE.Type, e : EXP)> (@t@)@e@ </code>

<********
 Similar to using EXP for expressions, 
  the standard code template name for statements. 
 syntax need to be defined by respective languages
********>
<code Stmt/>
<code Assign pars=(lhs,rhs)/>
<code ExpStmt pars=(exp) rebuild=((exp=="")?"":ExpStmt#exp) /> 
<code TypeInfo pars=(type,name,init) />
<code DeclStmt pars=(decl) /> 
<code StmtBlock pars=(stmts) symtab="" /> 
<code DeclarationBlock pars=(stmts) symtab="" /> 
<code FunctionDecl pars=(name,params,ret,body) symtab="" /> 
<code StructBody pars=(stmts) symtab="" />

<***** Variables and declarations ***>
<define TRACE_DECL "" /> <<* trace new variable declarations
<define TRACE_VARS ""/> <<* trace new local variables being created

<xform BuildName pars=(indexList)>
if (indexList : NULL) return NULL;
cur = car(indexList);
result = BuildName(cdr(indexList));
switch (cur) {
 case (first rest) | CODE.ArrayAccess#(first, rest):
   result = AppendList(BuildName(first), AppendList(BuildName(rest), result));
 case Name#n: result = AppendList(n, result);
 case "_"|""|NULL:  ""
 case INT|ID|CODE.UnrollIvarName|CODE.CopyBufName: result = "_" :: (cur :: result);
 default:
   print ("unrecognized structure:" cur); assert(0);
   result = "_":: (cur :: result);
}
result
</xform>

<xform AppendVar trace=GLOBAL.TRACE_VARS pars=(var)>
  if (trace : VAR) {
    if (trace == "") { REPLACE(ERASE(trace),var,trace); }
    else if (!LookupList(var,trace)) 
       REPLACE(ERASE(trace), AppendList(ERASE(trace),var),trace);
  }
</xform>

<xform AppendDecl trace=GLOBAL.TRACE_TARGET pars=(type,vars) init="">
    if (! (trace : VAR)) trace="";
    decl = trace;
    for (p_vars=vars; p_vars!=NULL;  p_vars = cdr p_vars) {
           cur = car(p_vars);
           if (cur != "") {
             cur = DeclStmt#(TypeInfo#(type,cur,init));
             if (!LookupList(cur,decl)) { decl = BuildList(decl,cur); }
           }
    }
    if (trace : VAR && decl != trace) { ModifyTraceHandle(trace,decl)}
    else {decl}
</xform>

<xform Append_Include trace=GLOBAL.TRACE_TARGET pars=(incl)>
    if (trace == "" || !Lookup(incl, trace))
       { REPLACE(ERASE(trace), incl::ERASE(trace), trace) }
    else {trace}
</xform>


<********
macros for parsing/building expressions 
Redefine for different languages
*********>

<define PARSE_BOP CODE.Bop/>
<define PARSE_UOP CODE.Uop/>
<define PARSE_CALL XFORM.EvalCall/>
<define PARSE_ARRAY CODE.ArrayAccess/>

<define EXP_BOP (("+" "-") ("*" "/") ("." "->"))/>
<define EXP_UOP ("-" "&" "*")/>
<define EXP_BASE INT|FLOAT|ID|CODE.CastExp />
<define EXP_PREC  MAP{}/>  <<* precedence not defined

<********
Setup unparsing of Expressions
********>
<xform EVAL_EXP_PREC pars=(input) opType=GLOBAL.EXP_BOP >
   precMap=GLOBAL.EXP_PREC;
   for ( (i = 1; p_op = opType) ; p_op != NULL; (p_op=cdr p_op; i=i+1))
   {
     for (p_op2 = car p_op; p_op2 != NULL; p_op2 = cdr p_op2)
        precMap[car p_op2] = i;
   }
   input
</xform>

<define PREP EVAL_EXP_PREC/>

<*********************************************
rebuild/Parse/Unparse functions for Expressions
*********************************************>

<code OP pars=(content) /> <<* used to annotate an arbitrary operator
<code MIN pars=(first,second)/> 
<code MAX pars=(first,second)/> 
<define NEED_MIN_MAX MIN|MAX />

<code Uop pars=(op, opd) rebuild=(XFORM.RebuildUop(op,opd)) parse=0>
@((opd : CODE.Bop)? ( op "(" opd ")") : (op opd))@
</code>

<code Bop pars=(op, opd1, opd2) rebuild=(XFORM.RebuildBop(op,opd1,opd2)) parse=0 > 
@
if (op=="+" && opd2 : Uop#("-",_)) { op="-"; Uop#(_,opd2=_)=opd2; }
p1=(opd1:INT|ID|(_)...)?100:0; 
p2=(opd2:INT|ID|(_)...)?100:0;
p=GLOBAL.EXP_PREC[op];
flag = 0;
if ( opd1:Bop#(op1,_,_)) {
  p1=GLOBAL.EXP_PREC[op1];
  if (op1 == "&&" || op1 == "||")
    flag = 1;
}
if (opd2 : Bop#(op2,_,_)) { p2=GLOBAL.EXP_PREC[op2]; }
((p1<p)?("("opd1")"):((opd1 : ID || flag == 0)?opd1:("("opd1")")))
op
((p2<=p)?("("opd2")"):opd2)
@
</code>

<code FunctionCall pars=(function, args)
                rebuild= (XFORM.EvalCall(function,args)) /> 
<code ArrayAccess pars=(array,subscript)> @array@[@subscript@] </code>  

<code Multiply parse=LIST(EXP,"*") />
<code ExpList parse=LIST(EXP,",") />
<code StmtList parse=LIST(Stmt,"\n") />

<********************************************
 rewrite $exp$ to be _div * factor + _mod. 
e.g., Mod(a*b+c, b) = (a,c)
**********************************************>  
<xform IntDiv pars=(exp, div) output=(_quotiant,_remainder)/>

<********************************************
 evaluate boolean expressions
**********************************************>  
<xform UnionComparison pars=(first,second) not="!" />
<xform IntersectComparison pars=(first,second) not="!" />
<xform EvalBoolOr pars=(first,second) or="||" not="!"/>
<xform EvalBoolAnd pars=(first,second) not="!" and="&&"/>
<xform EvalBoolNot pars=(input) not="!"/>
<********************************************
 Build a list of expressions by applying $op$
   to each element in the two input lists 
**********************************************>  
<xform Build_listExp pars=(op, list1, list2)/>

<********************************************
Reduce a list of expressions to a single one
by applying $op$ to all elements in the list 
**********************************************>  
<xform Reduce_listExp pars=(op, opds) />


<******************************************
    Routine implementations 
*******************************************>

<code Tuple pars=(elems : CODE.ExpList) output=("("elems")")> _(@elems@) </code>

<xform EvalCall pars=(op,opd)>
 len = LEN(opd);
 ismin=("min"^len); ismax = ("max"^len);
 switch (op) {
 case ismin: 
         opd1 = MIN#(car(opd), car(cdr(opd)));
         return (len==2)? opd1 : MIN#(opd1, car(cdr(cdr(opd))));
 case ismax : 
         opd1 = MAX#(car(opd), car(cdr(opd)));
         return (len==2)? opd1 : MAX#(opd1, car(cdr(cdr(opd))));
 case "_" : return CODE.Tuple#(opd);
 default: return (CODE.FunctionCall#(op,opd));
 }
</xform>

<xform IntDiv pars=(exp, div) output=(_quotiant,_remainder)>
if (exp : INT && div : INT) { if (exp == 0) { (0,0) } else if (div != 0) { (exp / div, exp % div) } else { ERROR("[IntDiv:] Division by zero:" exp "/" div); } }
else { 
  switch (div) {
  case 1:  (exp,0) 
  case Bop#("*",d1,d2):
      (q1=_,r1=_) = IntDiv(exp, d1);
      (q2=_,r2=_) = IntDiv(q1, d2);
      (q2, Bop#("+", r1, RebuildBop("*",r2,d1)))
  case ID|CODE.Name|INT: 
     switch (exp) {
       case Uop#("-", arg) : res1 = IntDiv(arg,div); (-res1[0], -res1[1]) 
       case (Bop#("+", opd1, opd2)) : 
           res1 = IntDiv(opd1, div); 
           res2 = IntDiv(opd2, div);
           (res1[0] + res2[0], res1[1] + res2[1])
       case (Bop#("*", opd1, opd2) ):
           (q1=_,r1=_) = IntDiv(opd1, div); 
           if (q1 != 0) return (q1*opd2,r1 * opd2);
           (q2=_,r2=_) = IntDiv(opd2, div);
           if (q2 != 0) { (opd1*q2, opd1*r2) }
           else  { (0, exp) }
       case div : (1,0)
       default: (0,exp)
     }
  }
 }
</xform>

<xform UnionComparison pars=(first,second) not="!">
if (first == second) RETURN first;
switch (first) {
case Uop#(not, e1): 
   r = IntersectComparison(e2, first);
   switch (r) {
   case e2: TRUE  
   case FALSE: second 
   default: ""
   }
case Bop#("==",e1,e2):
   switch (second) {
   case Bop#("==",e1,e3)|Bop#("==",e3,e1): 
         (e3 == e2)? first : ""
   case Bop#("==",e2,e3)|Bop#("==",e3,e2): (e3 == e1)? first : ""
   case Bop#("!=",e1,e2)|Bop#("!=",e2,e1): TRUE
   default: ""
   }
case Bop#("!=",e1,e2):
   (second : Bop#("==",e1,e2)|Bop#("==",e2,e1))? TRUE : ""
case Bop#("<", f1,f2) | Bop#(">", f2, f1): 
   switch (second) {
   case Bop#("<",f1,f2)|Bop#(">", f2,f1): first
   case Bop#("<="|"!=",f1,f2)|Bop#(">="|"!=", f2,f1): second
   case Bop#(">=", f1,f2)|Bop#("<=",f2,f1): TRUE
   case Bop#(">", f1,f2)|Bop#("<",f2,f1): Bop#("!=",f1,f2)
   case Bop#("==", f1,f2)|Bop#("==",f2,f1): Bop#("<=",f1,f2)
   default: ""
   }
case Bop#("<=", f1,f2) | Bop#(">=", f2, f1):
   switch (second) {
   case Bop#("=="|"<"|"<=",f1,f2)|Bop#("=="|">"|">=", f2,f1): first
   case Bop#("!=",f1,f2)|Bop#("!=", f2,f1): second
   case Bop#(">", f1,f2)|Bop#("<",f2,f1): TRUE
   default: ""
   }
}
</xform>

<xform IntersectComparison pars=(first,second) not="!">
switch (first) {
case Bop#("==",e1,e2):
   switch (second) {
   case Bop#("==",e2,e1): first
   case Bop#("!=",e1,e2)|Bop#("!=",e2,e1): FALSE
   case Bop#("==",e2|e1,(e3=INT))|Bop#("==",(e3=INT),e1|e2): 
           (e1 : INT || e2 : INT)? FALSE : ""
   case Bop#("!=",e2|e1,(e3=INT))|Bop#("!=",(e3=INT),e1|e2): 
           (e1 : INT || e2 : INT)? first : ""
   case Bop#("<=",e2|e1,(e3=INT))|Bop#(">=",(e3=INT),e2|e1): 
          (e1 : INT)? ( (e1 <= e3)? first : FALSE) 
         :(e2 : INT)? ( (e2 <= e3)? first : FALSE) : ""
   case Bop#("<",e2|e1,(e3=INT))|Bop#(">",(e3=INT),e2|e1): 
          (e1 : INT)? ( (e1 < e3)? first : FALSE) 
         :(e2 : INT)? ( (e2 < e3)? first : FALSE) : ""
   case Bop#(">",e2|e1,(e3=INT))|Bop#("<",(e3=INT),e2|e1): 
          (e1 : INT)? ( (e1 > e3)? first : FALSE) 
         :(e2 : INT)? ( (e2 > e3)? first : FALSE) : ""
   default: ""
   }
case Bop#("!=",e1,e2):
   switch (second) {
      case Bop#("!=",e1,e2)|Bop#("!=",e2,e1): first
      case Bop#("==",e1,e2)|Bop#("==",e2,e1): FALSE 
      case Bop#("<"|">",e1,e2) | Bop#("<"|">",e2,e1): second
      case Bop#("<=",e1,e2) | Bop#(">=",e2,e1): Bop#("<",e1,e2)
      case Bop#("<=",e2,e1) | Bop#(">=",e1,e2): Bop#("<",e2,e1)
      case Bop#("==",e1|e2, (e3=INT))|Bop#("==",(e3=INT),e2|e1): 
            (e1 : INT || e2 : INT)? second : ""
      case Bop#("<="|"<",e1|e2,(e3=INT)) | Bop#(">="|">",(e3=INT),e1|e2): 
           (e2 : INT && e2 > e3 || e1 : INT && e1 > e3)? second : ""
      case Bop#(">="|">",e1|e2,(e3=INT)) | Bop#("<="|"<",(e3=INT),e1|e2): 
           (e2 : INT && e2 < e3 || e1 : INT && e1 < e3)? second : ""
      default: ""
   }
case Bop#("<", f1,f2)|Bop#(">",f2,f1): 
   switch (second) {
   case Bop#("<="|"!=",f1,f2)|Bop#(">="|"!=", f2,f1): first
   case Bop#(">"|"==", f1,f2)|Bop#("<"|"==",f2,f1): FALSE
   case Bop#("==",f1|f2,(f3=INT)) | Bop#("==",(f3=INT), f1|f2):
        (f1 : INT)? ((f1<f3)? second : FALSE) 
       : (f2 : INT)? ((f2>f3)? second : FALSE) : ""
   case Bop#("<"|"<=",f2,(f3=INT))|Bop#(">"|">=",(f3=INT),f2): 
        (f1 : INT)? ((f3 <= f1)? FALSE : "") : ""
   case Bop#("<"|"<="|"!=",f1,(f3=INT))|Bop#(">"|">="|"!=",(f3=INT),f1): 
        (f2 : INT)? (( f2 <= f3)? first : Bop#("<",f1,f3)) : ""
   case Bop#(">"|">="|"!=",f2,(f3=INT))|Bop#("<"|"!=",(f3=INT),f2):
        (f1 : INT)? (( f1 >= f3)? first : Bop#(">",f2,f3)) : ""
   default: ""
   }
case Bop#("<=", f1,f2)|Bop#(">=",f2,f1):
   switch (second) {
   case Bop#("!=",f1,f2)|Bop#("!=", f2,f1): Bop#("<",f1,f2)
   case Bop#("<", f1,f2)|Bop#(">",f2,f1): second
   case Bop#(">", f1,f2)|Bop#("<",f2,f1): FALSE
   case Bop#("==",f1|f2,(f3=INT)) | Bop#("==",(f3=INT), f1|f2):
        (f1 : INT)? ((f1<=f3)? second : FALSE) 
       : (f2 : INT)? ((f2>=f3)? second : FALSE) : ""
   case Bop#("<"|"<="|"!=",f1,(f3=INT))|Bop#(">"|">="|"!=",(f3=INT),f1): 
        (f2 : INT)? (( f2 < f3)? first : second) : ""
   case Bop#(">"|">="|"!=",f2,(f3=INT))|Bop#("<"|"!=",(f3=INT),f2):
        (f1 : INT)? (( f1 > f3)? first : second) : ""
   default: ""
   }
}
</xform>

<xform EvalBoolAnd pars=(first,second) not="!" and="&&" or="||">
if (first == second) RETURN first;
if (second==TRUE) RETURN first;
if (first==TRUE) RETURN second;
if (first == FALSE || second == FALSE) RETURN FALSE;
if (first == Uop#(not, second) || second == Uop#(not, first)) RETURN FALSE;
if (first : Uop#(not,nf))  first = EvalBoolNot(nf);
switch (first) {
case Bop#(and,f1,f2): EvalBoolAnd(f1, EvalBoolAnd(f2,second))
case Bop#(or, f1, f2): EvalBoolOr(EvalBoolAnd(f1,second), EvalBoolAnd(f2,second))
case Bop#("=="|">="|"<="|"!="|"<"|">",_,_) : 
   if (second : Uop#(not,nf2))  second = EvalBoolNot(nf2);
   switch (second) {
   case Bop#(or,f1,f2):EvalBoolOr(EvalBoolAnd(first,f1),EvalBoolAnd(first,f2)) 
   case Bop#("=="|">="|"<="|"!="|"<"|">",_,_) : 
        r1 = IntersectComparison(first, second); 
        (r1 == "")? Bop#(and, first, second) : r1
   case Bop#(and, Bop#(and, f1, f2), f3): 
          EvalBoolAnd(first, EvalBoolAnd(f1, EvalBoolAnd(f2, f3)))
   case Bop#(and,f1,f2): 
        r1 = IntersectComparison(first, f1); 
        switch (r1) {
        case FALSE: FALSE
        case f1: second
        case first: EvalBoolAnd(first,f2)
        case "":  r2 = EvalBoolAnd(first, f2);
             (r2 == FALSE)?  FALSE : Bop#(and, f1, r2)
        default: Bop#(and, r1, f2)
        }
    default: Bop#(and,first,second)
   }
default: Bop#(and,first,second)
}
</xform>

<xform IsEqual pars=(first,second) not="!" or="||" and="&&">
 (first == second)? first
: (first : Bop#( (op1="+"|and|"*"), f1,f2) && 
   second : Bop#( (op2="+"|and|"*"),g1,g2) && op1 == op2)? 
   ((IsEqual(f1,g1) && IsEqual(f2,g2)) || IsEqual(f1,g2) && IsEqual(f2,g1))
: 0
</xform>

<xform EvalBoolOr pars=(first,second) not="!" or="||" and="&&">
 (IsEqual(first,second))? first
:(first==TRUE || second==TRUE)? TRUE
:(second==FALSE)? first
:(first==FALSE)? second
:(second : Uop#(not, first))? TRUE
:(first : Uop#(not, second))? TRUE
:(first : Bop#(and,f1,f2) && second : Bop#(and,g1,g) && EvalBoolAnd(first,second): first|second)? first
: Bop#(or, first, second)
</xform>

<xform EvalBoolNot pars=(input) not="!" and="&&" or="||">
 switch (input){
 case FALSE: TRUE
 case TRUE: FALSE
 case Uop#(not, opd): opd 
 case Bop#("==", e1,e2) : Bop#("!=", e1, e2)
 case Bop#("!=", e1,e2) : Bop#("==", e1, e2)
 case Bop#(">", e1, e2) : Bop#("<=", e1, e2)
 case Bop#("<=", e1, e2) : Bop#(">", e1, e2)
 case Bop#("<", e1, e2) : Bop#(">=", e1, e2)
 case Bop#(">=", e1, e2) : Bop#("<", e1, e2)
 case Bop#(or, e1,e2) : Bop#(and, EvalBoolNot(e1), EvalBoolNot(e2))
 case Bop#(and, e1,e2) : Bop#(or, EvalBoolNot(e1), EvalBoolNot(e2))
 default: Uop#(not,input)
}
</xform>

<xform RebuildUminus pars=(input)>
  (input : INT)?  (-input)
: (input : Uop#("-",exp))? exp
: (input : Bop#("+", opd1, opd2))?  
     Bop#("+",RebuildUminus(opd1),RebuildUminus(opd2))
: (input : Bop#("*", (opd1=INT), opd2))?
     Bop#("*", -opd1, opd2)
: (input : Bop#("*", opd1, (opd2=INT)))?
     Bop#("*", opd1, opd2)
: Uop#("-",input)
</xform>

<xform RebuildPlus  pars=(lhs,rhs) >
 ((lhs : INT) && (rhs : INT))? lhs + rhs
: (lhs : MIN#(d1,d2))? MIN#(RebuildPlus(d1,rhs),RebuildPlus(d2,rhs))
: (lhs : MAX#(d1,d2))? MAX#(RebuildPlus(d1,rhs),RebuildPlus(d2,rhs))
: (rhs : MIN#(d1,d2))? MIN#(RebuildPlus(lhs,d1),RebuildPlus(lhs,d2))
: (rhs : MAX#(d1,d2))? MAX#(RebuildPlus(lhs,d1),RebuildPlus(lhs,d2))
: (rhs : v2=INT)? (
     (v2 == 0)? lhs 
   : (lhs : Bop#("+", opd1, opd2))?
         ( (opd1 : INT)? RebuildPlus((opd1+rhs), opd2) : Bop#("+",rhs, lhs) )
   : (lhs : Bop#("-", opd1, opd2))?
         ( (opd1 : (v=INT))? Bop#("-",v+v2, opd2)
          : (opd2 : (v=INT))? RebuildPlus(opd1, -v+v2)  
          : Bop#("+",rhs, lhs) )
   : Bop#("+",rhs, lhs)
 )
: (lhs : INT)? RebuildPlus(rhs, lhs) 
: (lhs : Bop#("+",lopd1, lopd2))? (
   (rhs : Bop#("+",ropd1,ropd2))?  (
       for ( (cur=ropd1; r = lhs); cur;
           (ropd2: Bop#("+",(ncur=_), (nopd2=_)))? 
                 (cur=ncur;ropd2=nopd2):(cur=ropd2;ropd2=""))  
          { r = RebuildPlus(r,cur); }
       r
    )
   : (   
      for ( (cur=lopd1; r = ""; found=0; nrhs = RebuildUminus rhs); cur;
           (lopd2 : Bop#("+",ncur=_, nopd2=_))? (cur=ncur;lopd2=nopd2):(cur=lopd2;lopd2="") ) {
          if (cur == nrhs) found=1;
          else r= BuildList(cur,r);
      }
      (!found)? Bop#("+",rhs,lhs) 
      : (r == "")? 0
      : ( for (( r1=car(r); pr = cdr(r)); pr != NULL; pr=cdr(pr))
             r1 = Bop#("+",car(pr), r1); 
          r1 )
   )
)
: (rhs : Bop#("+",_,_))? RebuildPlus(rhs,lhs)
: (lhs == (RebuildUminus rhs))?  0
: Bop#("+",lhs,rhs) 
</xform> 

<xform RebuildExp pars=(exp) />
<xform RebuildBop pars=(op,lhs,rhs)>
  switch (op) 
  {
   case "+": { RebuildPlus(lhs,rhs) }
   case "-": { RebuildPlus(lhs,RebuildUminus rhs) }
   case "*":
            ((lhs : INT) && (rhs : INT))? (lhs=>INT) * (rhs=>INT) 
          : (lhs == 0 || rhs == 0)? 0
          : (lhs==1)?  rhs 
          : (rhs==1)?  lhs
          : (lhs==-1)? Uop#("-",rhs)
          : (rhs==-1)? Uop#("-",lhs)
          : (lhs : Bop#("+", lopd1, lopd2))? (lopd1 * rhs + lopd2 * rhs)
          : (rhs : Bop#("+", ropd1, ropd2))? (lhs * ropd1 + lhs * ropd2)
          : (lhs : Bop#("/",1,lhs1))? Bop#("/", rhs, lhs1)
          : (rhs : Bop#("/",1,rhs1))? Bop#("/", lhs, rhs1)
          : (rhs : INT)? Bop#("*",rhs,lhs)
          : Bop#("*",lhs, rhs)
   case "/": 
           ((lhs : INT) && (rhs : INT))? lhs / rhs
         : (lhs==0)? 0
         : (rhs==1)? lhs
         : ((rhs : INT) && (lhs : Bop#("*",lhs1,lhs2)) && (lhs1 : INT))?
                RebuildExp((lhs1/rhs) *  lhs2)
         :  Bop#("/",lhs, rhs)
   case  "%":
        ((lhs : INT) && (rhs : INT))? lhs % rhs
         : (rhs==1)? 0
         : Bop#("%",lhs, rhs) 
   case MIN:
       (lhs=="")? rhs : (rhs=="")? lhs
       :(((cur=lhs - rhs)) : INT)? ((cur <= 0)? lhs : rhs) : MIN#(lhs,rhs) 
   case MAX:
       (lhs=="")? rhs : (rhs=="")? lhs
       :(((cur=lhs - rhs)) : INT)? ((cur <= 0)? rhs : lhs) : MAX#(lhs,rhs) 
   case "&&": EvalBoolAnd(lhs,rhs)
   case "||": EvalBoolOr(lhs,rhs)
   default: Bop#(op, lhs,rhs)
 }
</xform>

<xform RebuildUop pars=(op,opd)>
   switch (op) 
   {
    case "-" : RebuildUminus(opd)
    case "!" : EvalBoolNot(opd)
    default: Uop#(op, opd)
   }
</xform>

<xform RebuildExp pars=(exp) >
if (exp : Bop#(op, lhs, rhs))
   { RebuildBop(op,lhs,rhs) }
else  if (exp : Uop#(op,opd))
   { RebuildUop(op,opd) }
else { exp }
</xform>

<xform Build_listExp pars=(op, list1, list2)>
(list1 : (first1 rest1))? (
  (list2 : (first2 rest2))? 
     RebuildExp(BUILD_BOP(op,first1,first2)) :: Build_listExp(op,rest1, rest2)
  :  RebuildExp(BUILD_BOP(op,first1,list2)) :: rest1
)
: (RebuildExp(BUILD_BOP(op,list1,list2)))
</xform>

<xform Reduce_listExp pars=(op, opds) >
switch (op){
case "*" : res = 1;
case "+" : res = 0;
}
for (p_opds = opds; p_opds != NULL; p_opds = cdr p_opds)
  res = RebuildExp(BUILD_BOP(op, res, car p_opds));
res
</xform>

<xform Break_plus pars=(term, exp)>
  (term == exp)? (1 0)
: (exp : Bop#("*",opd1,opd2))? 
 (  (opd1 == term)? (opd2 0) 
  : (opd2 == term)? (opd1 0)
  : (0,exp)  )
: (exp : Bop#("+",opd1,opd2))? 
   Build_listExp("+", BK_plus(term,opd1), BK_plus(term,opd2))
: (0 exp)
</xform>

<xform get_coeff  pars=(var,exp) throwaway="" >
switch (exp) {
case var : 1
case NULL: NULL
case (first second): (get_coeff(var,first) (get_coeff(var,second)))
case (INT|ID|CODE.Name|CODE.CopyIvarName|CODE.UnrolledLoopStep) : 0
case Uop#("-",a1) : - (get_coeff(var, a1))
case Bop#("+", a1, a2): 
       c1 = get_coeff(var, a1);
       if (c1 != 0 && (throwaway == "" || (!(c1 : throwaway)))) { c1 }
       else { get_coeff(var, a2) } 
case Bop#("-", a1, a2): 
       c1 = get_coeff(var, a1);
       if (c1 != 0 && (throwaway == "" || (!(c1 : throwaway)))) { c1 }
       else { - get_coeff(var, a2) } 
case Bop#("*",a1,a2) : 
       c1 = get_coeff(var, a1);
       c2 = get_coeff(var, a2); 
       if (a1 : CODE.ArrayAccess || a2: CODE.ArrayAccess) {
          (c1 != 0)? c1 : (c2 != 0)? c2 : 0
       }
       else if (c1 != 0) { c1 * a2 } 
       else if (c2 != 0) { c2 * a1 }
       else { 0 }
case ArrayAccess#(_,sub) | FunctionCall#(_,sub) : get_coeff(var,sub)
case CODE.BlockLoopTileEnd#(_,_,stop) : get_coeff(var, stop)
}
</xform>
