include opt.pi
<trace target/>
<input to=target syntax="Cfront.code" from=("rose_dger.C")/>
<trace top_nest1,decl_top_nest1,nest1,nest2/>
<eval decl_top_nest1 = "";
      top_nest1 = (decl_top_nest1 nest1);
      EraseTraceHandle[repl=top_nest1](nest1,target)/>


<trace var_tile_nest1/>
<eval var_clnup_top_nest1 = top_nest1/>
<trace trace_include_files/>
<eval trace_include_files = "";
      target = (trace_include_files (ERASE(target)))/>
<trace trace_private_top_nest1/>
<eval trace_private_top_nest1 = ""/>
<eval nest1_1_X_dim = (1);
      nest1_1_X = ArrayAccess#("X","i")/>
<eval nest1_2_Y_dim = ("incY");
      nest1_2_Y = ArrayAccess#("Y","j"*"incY")/>

<parameter pthread_nest1 type=1.._ default=1 message="number of threads to parallelize loop nest1"/>
<parameter psize_nest1 type=1.._ default=256 message="number of loop iterations to run by different threads for nest1"/>
<parameter bsize_nest1 type=(INT INT) default=(16 16) message="Blocking factor for loop nest nest1"/>
<parameter copy1_config_X type=0..2 default=1 message="configuration for copy array X at loop nest1: 0-no opt; 1-copy; 2-strength reduction."/>
<parameter copy2_config_Y type=0..2 default=1 message="configuration for copy array Y at loop nest1: 0-no opt; 1-copy; 2-strength reduction."/>
<parameter ujsize_nest1 type=(INT) default=(2) message="Unroll and Jam factor for loop nest nest1"/>
<parameter scalar1_config_X type=0..2 default=1 message="configuration for scalarRepl array X at loop nest1: 0-no opt; 1-scalarRepl; 2-strength reduction."/>
<parameter scalar2_config_Y type=0..2 default=1 message="configuration for scalarRepl array Y at loop nest1: 0-no opt; 1-scalarRepl; 2-strength reduction."/>
<parameter usize_nest2 type=1.._ default=4 message="Unroll factor for loop nest2"/>

<cond psize_nest1==1||(psize_nest1>=(HEAD(bsize_nest1))&&(psize_nest1%HEAD(bsize_nest1))==0)&&(HEAD(bsize_nest1))==1||((HEAD(ujsize_nest1))<=(HEAD(bsize_nest1))&&(HEAD(bsize_nest1)%HEAD(ujsize_nest1))==0)&&usize_nest2<=(HEAD(TAIL(bsize_nest1)))&&(HEAD(TAIL(bsize_nest1))%usize_nest2)==0/>

<eval par_nest1 = DELAY{
         trace_private_top_nest1 = ("j_par" "i" "j");
         AppendDecl[trace=decl_top_nest1](IntegerType,"j_par");
         if (pthread_nest1!=1)  {
            TRACE((nest1_2_Y nest1_1_X),BlockLoops[factor=BlockDim#("j","j_par",psize_nest1);cleanup=0;trace_mod=(nest1_2_Y nest1_1_X)](nest1[Nest.body],nest1));
            ParallelizeLoop[trace=top_nest1;private=trace_private_top_nest1;trace_include=trace_include_files;threads=pthread_nest1](nest1);
            ERASE(nest1,top_nest1);
            nest1 = nest1[Nest.body];
            REPLACE(ERASE(nest1),nest1,top_nest1);
            MoveTraceHandle[trace=target](top_nest1,nest1)
         }
      }/>
<eval block_nest1 = DELAY{
         bdim_nest1 = (BlockDim#("j","j_bk",HEAD(bsize_nest1)) BlockDim#("i","i_bk",HEAD(TAIL(bsize_nest1))));
         var_tile_nest1 = COPY(nest1);
         AppendDecl[trace=decl_top_nest1](IntegerType,(("i_bk" "j_bk")));
         TRACE((nest1_2_Y nest1_1_X),BlockLoops[factor=bdim_nest1;cleanup=0;trace_innerNest=var_tile_nest1;trace_decl=decl_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest2[Nest.body],nest1));
         trace_private_top_nest1 = (("i_bk" "j_bk") (ERASE(trace_private_top_nest1)))
      }/>
<eval copy1_nest1 = DELAY{
         if (copy1_config_X==1)  {
            AppendDecl[trace=decl_top_nest1](IntegerType,(("nest1_1_X_cp0")));
            trace_private_top_nest1 = (("nest1_1_X_cp0") (ERASE(trace_private_top_nest1)));
            TRACE((nest1_2_Y nest1_1_X),CopyRepl[prefix="X_buf";data_type="double";scalar=0;init_loc=nest1;delete_loc=nest1;trace=top_nest1;trace_decl=decl_top_nest1;trace_mod=(nest1_2_Y nest1_1_X);trace_vars=trace_private_top_nest1;cpBlock=(CopyBlock#("nest1_1_X_cp0","i_bk",HEAD(TAIL(bdim_nest1))))](nest1_1_X,((CopyDim#("i",0,nest2[Nest.ctrl][Loop.stop],1))),nest1));
            TRACE((nest1_2_Y nest1_1_X),FiniteDiff[exp_type=PtrType#"double";prefix="X_buf_fd";trace=top_nest1;scalar=0;trace_decl=decl_top_nest1;trace_newVars=trace_private_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest1_1_X[ArrayAccess.array],((ExpDim#(nest2,1,nest1_1_X_dim[0]))),nest1));
            nest1_1_X_dim = (1)
         }else {
            if (copy1_config_X==2)  {
               TRACE((nest1_2_Y nest1_1_X),FiniteDiff[exp_type=PtrType#"double";prefix="X_buf_fd";trace=top_nest1;scalar=0;trace_decl=decl_top_nest1;trace_newVars=trace_private_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest1_1_X[ArrayAccess.array],((ExpDim#(nest2,1,nest1_1_X_dim[0]))),nest1))
            }
         }
      }/>

<eval copy2_nest1 = DELAY{
         if (copy2_config_Y==2)  {
            TRACE((nest1_2_Y nest1_1_X),FiniteDiff[exp_type=PtrType#"double";prefix="Y_buf_fd";trace=top_nest1;scalar=0;trace_decl=decl_top_nest1;trace_newVars=trace_private_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest1_2_Y[ArrayAccess.array],((ExpDim#(nest1,1,nest1_2_Y_dim[0]))),nest1))
         }
      }/>


<eval unrolljam_nest1 = DELAY{
         ERASE((nest1 nest2),top_nest1);
         TraceNestedLoops[trace=top_nest1](((nest1 nest2)),ERASE(var_tile_nest1));
         REPLACE(ERASE(var_tile_nest1),nest1,top_nest1);
         UnrollJam[factor=((HEAD(ujsize_nest1)));cleanup=0;trace=top_nest1](nest2,nest1)
      }/>
<eval scalar1_nest1 = DELAY{
         if (scalar1_config_X==1)  {
            TRACE((nest1_2_Y nest1_1_X),CopyRepl[prefix="X_1_scalar";data_type="double";scalar=1;init_loc=nest2[Nest.body];trace=top_nest1;trace_decl=decl_top_nest1;trace_mod=(nest1_2_Y nest1_1_X);trace_vars=trace_private_top_nest1](nest1_1_X,((CopyDim#("i",nest2[Nest.ctrl][Loop.i],nest2[Nest.ctrl][Loop.step],nest1_1_X_dim[0]))),nest2[Nest.body]));
            TRACE((nest1_2_Y nest1_1_X),FiniteDiff[exp_type=PtrType#"double";prefix="X_1_scalar_fd";trace=top_nest1;scalar=0;trace_decl=decl_top_nest1;trace_newVars=trace_private_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest1_1_X[ArrayAccess.array],((ExpDim#(nest2,1,nest1_1_X_dim[0]))),nest1));
            nest1_1_X_dim = (1)
         }else {
            if (scalar1_config_X==2)  {
               TRACE((nest1_2_Y nest1_1_X),FiniteDiff[exp_type=PtrType#"double";prefix="X_1_scalar_fd";trace=top_nest1;scalar=0;trace_decl=decl_top_nest1;trace_newVars=trace_private_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest1_1_X[ArrayAccess.array],((ExpDim#(nest2,1,nest1_1_X_dim[0]))),nest1))
            }
         }
      }/>
<eval scalar2_nest1 = DELAY{
         if (scalar2_config_Y==1)  {
            TRACE((nest1_2_Y nest1_1_X),CopyRepl[prefix="Y_2_scalar";data_type="double";scalar=1;init_loc=nest1[Nest.body];trace=top_nest1;trace_decl=decl_top_nest1;trace_mod=(nest1_2_Y nest1_1_X);trace_vars=trace_private_top_nest1](nest1_2_Y,((CopyDim#("j",nest1[Nest.ctrl][Loop.i],nest1[Nest.ctrl][Loop.step],nest1_2_Y_dim[0]))),nest1[Nest.body]));
            TRACE((nest1_2_Y nest1_1_X),FiniteDiff[exp_type=PtrType#"double";prefix="Y_2_scalar_fd";trace=top_nest1;scalar=0;trace_decl=decl_top_nest1;trace_newVars=trace_private_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest1_2_Y[ArrayAccess.array],((ExpDim#(nest1,1,nest1_2_Y_dim[0]))),nest1));
            nest1_2_Y_dim = (1)
         }else {
            if (scalar2_config_Y==2)  {
               TRACE((nest1_2_Y nest1_1_X),FiniteDiff[exp_type=PtrType#"double";prefix="Y_2_scalar_fd";trace=top_nest1;scalar=0;trace_decl=decl_top_nest1;trace_newVars=trace_private_top_nest1;trace_mod=(nest1_2_Y nest1_1_X)](nest1_2_Y[ArrayAccess.array],((ExpDim#(nest1,1,nest1_2_Y_dim[0]))),nest1))
            }
         }
      }/>

<eval unroll_nest2 = DELAY{
         UnrollLoops[factor=usize_nest2;cleanup=0](nest2[Nest.body],nest2)
      }/>
<eval cleanup_nest1 = DELAY{
         CleanupBlockedNests[trace=top_nest1](var_clnup_top_nest1)
      }/>


<eval APPLY{par_nest1};
      APPLY{block_nest1};
      APPLY{copy1_nest1};
      APPLY{copy2_nest1};
      APPLY{unrolljam_nest1};
      APPLY{scalar1_nest1};
      APPLY{scalar2_nest1};
      APPLY{unroll_nest2};
      APPLY{cleanup_nest1}/>
<output from=(target) syntax=("Cfront.code")/>
