#include "arrayAccess.h"
double max(double a,double b) {
   return a<b?b:a;
}
double abs(double a) {
   return a<0?-a:a;
}
void tomcatv(int n,double* x,double* y,double* aa,double* dd,double* d,double* rx,double* ry,double& rxm,double& rym) {
   int j;int i;
   double xx;double yy;double yx;double xy;double a;double b;double c;double r;
   double pxx;double qxx;double pyy;double qyy;double pxy;double qxy;
   double rel=2.0/0.98;
   {
      for (j=1; j<n-1; j+=1)
        {
           for (i=1; i<n-1; i+=1)
             {
                xx = arr_ref(x,i+1,j)-arr_ref(x,i-1,j);
                yx = arr_ref(y,i+1,j)-arr_ref(y,i-1,j);
                xy = arr_ref(x,i,j+1)-arr_ref(x,i,j-1);
                yy = arr_ref(y,i,j+1)-arr_ref(y,i,j-1);
                a = 0.25*(xy*xy+yy*yy);
                b = 0.25*(xx*xx+yx*yx);
                c = 0.125*(xx*xy+yx*yy);
                arr_ref(aa,i,j) = -b;
                arr_ref(dd,i,j) = b+b+a*rel;
                pxx = arr_ref(x,i+1,j)-2.0*arr_ref(x,i,j)+arr_ref(x,i-1,j);
                qxx = arr_ref(y,i+1,j)-2.0*arr_ref(y,i,j)+arr_ref(y,i-1,j);
                pyy = arr_ref(x,i,j+1)-2.0*arr_ref(x,i,j)+arr_ref(x,i,j-1);
                qyy = arr_ref(y,i,j+1)-2.0*arr_ref(y,i,j)+arr_ref(y,i,j-1);
                pxy = arr_ref(x,i+1,j+1)-arr_ref(x,i+1,j-1)-arr_ref(x,i-1,j+1)+arr_ref(x,i-1,j-1);
                qxy = arr_ref(y,i+1,j+1)-arr_ref(y,i+1,j-1)-arr_ref(y,i-1,j+1)+arr_ref(y,i-1,j-1);
                arr_ref(rx,i,j) = a*pxx+b*pyy-c*pxy;
                arr_ref(ry,i,j) = a*qxx+b*qyy-c*qxy;
             }
        }
      for (j=1; j<n-1; j+=1)
        {
           for (i=1; i<n-1; i+=1)
             {
                rxm = max(rxm,abs(arr_ref(rx,i,j)));
                rym = max(rym,abs(arr_ref(ry,i,j)));
             }
        }
      
      for (i=1; i<n-1; i+=1)
        {
           arr_ref(d,i,1) = 1.0/arr_ref(dd,i,1);
        }
      for (j=2; j<n-1; j+=1)
        {
           for (i=1; i<n-1; i+=1)
             {
                r = arr_ref(aa,i,j)*arr_ref(d,i,j-1);
                arr_ref(d,i,j) = 1.0/(arr_ref(dd,i,j)-arr_ref(aa,i,j-1)*r);
                arr_ref(rx,i,j) = arr_ref(rx,i,j)-arr_ref(rx,i,j-1)*r;
                arr_ref(ry,i,j) = arr_ref(ry,i,j)-arr_ref(ry,i,j-1)*r;
             }
        }
      for (i=1; i<n-1; i+=1)
        {
           arr_ref(rx,i,n-1) = arr_ref(rx,i,n-1)*arr_ref(d,i,n-1);
           arr_ref(ry,i,n-1) = arr_ref(ry,i,n-1)*arr_ref(d,i,n-1);
        }
      for (j=n-3; j>=1; j+=1)
        {
           for (i=1; i<n-1; i+=1)
             {
                arr_ref(rx,i,j) = (arr_ref(rx,i,j)-arr_ref(aa,i,j)*arr_ref(rx,i,j+1))*arr_ref(d,i,j);
                arr_ref(ry,i,j) = (arr_ref(ry,i,j)-arr_ref(aa,i,j)*arr_ref(ry,i,j+1))*arr_ref(d,i,j);
             }
        }
      for (j=1; j<n-1; j+=1)
        {
           for (i=1; i<n-1; i+=1)
             {
                arr_ref(x,i,j) = arr_ref(x,i,j)+arr_ref(rx,i,j);
                arr_ref(y,i,j) = arr_ref(y,i,j)+arr_ref(ry,i,j);
             }
        }
   }
}
