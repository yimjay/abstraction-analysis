include opt.pi
include OptHighLevel.pi
include OptConfig.pi

<**** Pattern optimizer *******>
<code MM_pat/>
<code BlockFactor pars=(content:LIST(INT," ")) rebuild=content> 
@content@ </code>

<parameter oc type=INT default=1 message="whether to optimize cleanup code"/>
<parameter sr type=INT default=1 message="whether to apply strength reduction"/>
<parameter tr type=0|1 default=0 message="whether to apply triangular array copying optimization"/>

<parameter sse default=0 message="whether to Assembly code with sse vectorization"/>
<parameter infile message="input file name"/>
<parameter outfile message="output file name"/>
<parameter opt type=0|1 default=1 message="whether to apply optimizations"/>
<parameter pa type=0|1 default=1 message="whether to recognize pattern annotations"/>

<parameter bk2 type=(INT)... default=((1)::NULL) message="Blocking factor for loop nest target" parse=LIST(CODE.BlockConfig,";")/>
<parameter pref type=0..5 default=2 message="configuration for prefetching array at loop target" />
<parameter pref_dist type=0.._ default=12 message="distance for prefetching array at loop target" />
<parameter ur type=1.._ default=4 message="Unroll factor for loop target" parse=LIST(INT,";") />
<parameter scalar type=0..5 default=4 message="scalar replacement configuration" parse=LIST(INT,";") />

<parameter reusereg type=0|1 default=0 message="whether to reuse registers before unroll&jam"/>

<trace target/>
<trace var_incl_files=NULL/>
<trace trace_decl="" />

<define TRACE_TARGET target/>
<define TRACE_INCL var_incl_files/> 
<define TRACE_DECL trace_decl/>

<****** checking the validity of the incoming command-line parameters ******>
<eval cbk1 = car(car(bk1)); cbk2=car(car(bk2)); uj1 = car(uj); 
      cuj1=car(uj1); cuj2=car(cdr(uj1));
      cbk=((cbk2==1)?cbk1 : cbk2);
      if (cbk == 1) cbk=32; />

<cond (tbk > cbk1 && (cbk1 >= cbk2) && (cbk1 % cbk2 == 0) && 
   (cbk >= cuj1) && (cbk % cuj1 == 0) && (cbk >= cuj2) && (cbk % cuj2 == 0) 
   && (cbk >= ur) && (cbk % ur == 0))/>

<****** end of checking the validity of the incoming command-line parameters ******>

<input cond=(pa) to=target syntax="MM_pat.code" annot=FALSE from=infile />
<input cond=(!pa) to=target syntax="MM_pat.code" parse=NoParse from=infile />
<eval 
  if (!opt) {
      found = "";
      foreach (ERASE(target) : (cur=CODE.MM_pat) : TRUE) {
        found=BuildList(cur,found);
      }
  }
  else {
      target = ((var_incl_files="") ERASE(target));
    foreach (ERASE(target) : (cur=CODE.MM_pat) : TRUE) {
      <*Collect Information*>
      setup_loop_opt[pre_compute=cur[MM_pat.pre_compute]](cur);
      setup_array_opt[pre_compute=cur[MM_pat.pre_compute];cp_tag=(GLOBAL.cp/1)](cur);
      REPLACE(ERASE(cur), cur[MM_pat.content], cur);
      <*Parallelization*>
      l1 = car(GLOBAL.XFORM_LOOPS_OUTER);
      if ((GLOBAL.th/1)>1) {
        invoke_blocking[ret_new_vars=GLOBAL.XFORM_PRIVATE_VARS;factor=GLOBAL.XFORM_PAR_SIZE](l1);
        ParallelizeLoop[private=XFORM_PRIVATE_VARS;threads=XFORM_PTNUM](XFORM_PAR_LOOP);
        MoveTraceHandle(l1, l1[Nest.body]);
        MoveTraceHandle(XFORM_LOOP_CLEANUP, l1);
      }
      <*Loop Blocking*>
      if (cdr(XFORM_LOOPS_OUTER) != NULL) {
        invoke_blocking[inner=XFORM_LOOPS_INNER; ret_new_vars=GLOBAL.XFORM_PRIVATE_VARS; factor=GLOBAL.XFORM_TILE_SIZE] (XFORM_LOOPS_OUTER);
      }
      <*Array Copying*>
      if (GLOBAL.cp > 0) {
        foreach (XFORM_ARRAY_COPY: (r=(CLEAR arr, CLEAR exp)) : TRUE) {
          loops = XFORM_DIMS_OUT[arr];
          info = XFORM_REF_INFO[arr];
          (GLOBAL.tr == 1)?(loc = XFORM_PAR_TOP; vars = NULL;):(loc = l1; vars = XFORM_PRIVATE_VARS;);
          (GLOBAL.cpth == 1)?(loc = XFORM_PAR_TOP; vars = NULL;):(loc = l1; vars = XFORM_PRIVATE_VARS;);
          info1=invoke_array_copying[data_type=XFORM_ETYPE;ret_new_vars=vars]
            (exp, loops, loc, info);
          XFORM_REF_INFO[arr]=info1;
        }
      }
      <*Loop Unroll&Jam*>
      if (cdr(XFORM_LOOPS_INNER) != NULL) {
        invoke_unroll_and_jam[factor=GLOBAL.XFORM_UNROLL_SIZE](XFORM_LOOPS_INNER);
      } else {
        inner = (car(XFORM_LOOPS_INNER))[Nest.body];
        REPLACE(inner, COPY(inner), XFORM_LOOPS_INNER);
      }
      <*Scalar Replacement*>
      array_name_to_scalar_vars = MAP{};
      foreach (XFORM_ARRAY_REFS: (CLEAR arr_name, CLEAR exp) : TRUE) {
        vars = NULL;
        loops = XFORM_DIMS_IN[arr_name];
        info = XFORM_REF_INFO[arr_name];
        vars = invoke_scalar_repl[data_type=XFORM_ETYPE;ret_new_vars=vars](exp, loops, info);
        for (p=vars; p!=NULL; p=cdr(p)) {
          (_,pvars) = car(p);
          XFORM_PRIVATE_VARS=pvars::ERASE(XFORM_PRIVATE_VARS);
        }
        array_name_to_scalar_vars[arr_name] = vars;
      }
      <*SIMD Vectorization*>
      if ((GLOBAL.sse)/1 == 1) {
        scope = XFORM_LOOPS_INNER;
        for (p=XFORM_LOOPS_INNER; cdr(p)!=NULL; p=cdr(p)) {scope = p;}
        invoke_simd[ret_new_vars=XFORM_PRIVATE_VARS;global_vars=XFORM_SCALAR_INFO;data_type=XFORM_ETYPE]
          (XFORM_REF_INFO, array_name_to_scalar_vars, XFORM_DIMS_IN, scope);
      }
      <*Strength Reduction*>
      if ((GLOBAL.sr/1)>0) {
      foreach (XFORM_ARRAY_REFS: (CLEAR arr, CLEAR exp) : TRUE) {
        info = XFORM_REF_INFO[arr];
        if (car(GLOBAL.XFORM_LOOPS_OUTER) != car(GLOBAL.XFORM_LOOPS_INNER))
          dim=AppendList(GLOBAL.XFORM_LOOPS_OUTER,GLOBAL.XFORM_LOOPS_INNER); 
        else dim=GLOBAL.XFORM_LOOPS_OUTER; 
        if ((GLOBAL.th/1)>1) threads_offset=XFORM_PAR_LOOP;
        else threads_offset="";
        invoke_strength_reduction[tag=GLOBAL.sse;data_type=XFORM_ETYPE;outside_loc=threads_offset;
            ret_new_vars=GLOBAL.XFORM_PRIVATE_VARS](exp, info, dim);
      }}
      <*Loop unrolling*>
      invoke_loop_unrolling[factor=GLOBAL.ur](XFORM_LOOPS_INNER);
      <*Loop splitting*>
      res=invoke_loop_splitting(GLOBAL.XFORM_LOOP_CLEANUP);
      REPLACE(ERASE(GLOBAL.XFORM_LOOP_CLEANUP),REBUILD(res),GLOBAL.TRACE_TARGET);
      <*peephole*>
      peephole_optimization(GLOBAL.XFORM_LOOP_CLEANUP);
       }
    }
/>
<output cond=(opt) from=(target) syntax="MM_pat.code" to=outfile/>
<output cond=(!opt) from=(found) syntax="MM_pat.code" to=outfile/>
