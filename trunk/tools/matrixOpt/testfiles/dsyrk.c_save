#define max(a,b) (((a) < (b))? (b) : (a))
#define min(a,b) (((a) < (b))? (a) : (b))

#include <SSE3Dnow.h>

#include <stdlib.h>
#include <omp.h>


void dsyrk(const int M,const int N,const int K,const double alpha,const double *A,const int lda,const double *B,const int ldb,const double beta,double *C,const int ldc)
{
  int i; 
  int j;
  int k;
{
   int j_bk_1;
   int j_bk_2;
   int i_bk_3;
   int k_bk_4;
   int A_cp_j_bk_6_index;
   int A_cp_j_bk_2_bk_5_index;
   int A_cp_k_bk_7_index;
   int A_cp_index;
   double* A_cp_alloc;
   double* A_cp;
   double _A_cp_0_0;
   double _A_cp_1_0;
   double _A_cp_2_0;
   double _A_cp_3_0;
   double _A_cp__n_0_0;
   double _C_0_0;
   double _C_1_0;
   double _C_2_0;
   double _C_3_0;
   double _tmp__split;
   double* __FD__A_cp_0;
   double* __FD__A_cp_0_0;
   double* __FD__A_cp_0_0_0;
   double* __FD__A_cp_0_0_0_0;
   double* __FD__A_cp__n_0;
   double* __FD__A_cp__n_0_0;
   double* __FD__A_cp__n_0_0_0;
   double* __FD__A_cp__n_0_0_0_0;
   double* __FD__C_0;
   double* __FD__C_0_0;
   double* __FD__C_0_0_0;
   double* __FD__C_0_0_0_0;
   A_cp_alloc=(double*)malloc((64*((63+N)/64)*(128*((127+N)/128))+(1<<16))*sizeof(double));
   A_cp=(double*)((size_t)A_cp_alloc + (1 << 16) >> 16 << 16);
   A_cp_index = 0;
   for (A_cp_j_bk_6_index=0; A_cp_j_bk_6_index<-127+N; A_cp_j_bk_6_index+=128)
     {
        for (A_cp_j_bk_2_bk_5_index=A_cp_j_bk_6_index; A_cp_j_bk_2_bk_5_index<128+A_cp_j_bk_6_index; A_cp_j_bk_2_bk_5_index+=64)
          {
             for (A_cp_k_bk_7_index=0; A_cp_k_bk_7_index<-63+N; A_cp_k_bk_7_index+=64)
               {
                  for (j=A_cp_j_bk_2_bk_5_index; j<64+A_cp_j_bk_2_bk_5_index; j+=1)
                    {
                       for (k=A_cp_k_bk_7_index; k<64+A_cp_k_bk_7_index; k+=1)
                         {
                            A_cp[A_cp_index++] = A[j+k*lda];
                         }
                    }
               }
             if (A_cp_k_bk_7_index<N) 
               {
                  for (j=A_cp_j_bk_2_bk_5_index; j<64+A_cp_j_bk_2_bk_5_index; j+=1)
                    {
                       for (k=A_cp_k_bk_7_index; k<N; k+=1)
                         {
                            A_cp[A_cp_index++] = A[j+k*lda];
                         }
                       A_cp_index = A_cp_index+(-N+(64+A_cp_k_bk_7_index))*1;
                    }
                  A_cp_k_bk_7_index = A_cp_k_bk_7_index+64;
               }
          }
     }
   if (A_cp_j_bk_6_index<N) 
     {
        for (A_cp_j_bk_2_bk_5_index=A_cp_j_bk_6_index; A_cp_j_bk_2_bk_5_index<-63+N; A_cp_j_bk_2_bk_5_index+=64)
          {
             for (A_cp_k_bk_7_index=0; A_cp_k_bk_7_index<-63+N; A_cp_k_bk_7_index+=64)
               {
                  for (j=A_cp_j_bk_2_bk_5_index; j<64+A_cp_j_bk_2_bk_5_index; j+=1)
                    {
                       for (k=A_cp_k_bk_7_index; k<64+A_cp_k_bk_7_index; k+=1)
                         {
                            A_cp[A_cp_index++] = A[j+k*lda];
                         }
                    }
               }
             if (A_cp_k_bk_7_index<N) 
               {
                  for (j=A_cp_j_bk_2_bk_5_index; j<64+A_cp_j_bk_2_bk_5_index; j+=1)
                    {
                       for (k=A_cp_k_bk_7_index; k<N; k+=1)
                         {
                            A_cp[A_cp_index++] = A[j+k*lda];
                         }
                       A_cp_index = A_cp_index+(-N+(64+A_cp_k_bk_7_index))*1;
                    }
                  A_cp_k_bk_7_index = A_cp_k_bk_7_index+64;
               }
             A_cp_index = A_cp_index+(A_cp_j_bk_6_index+128-A_cp_k_bk_7_index)*64;
          }
        if (A_cp_j_bk_2_bk_5_index<N) 
          {
             for (A_cp_k_bk_7_index=0; A_cp_k_bk_7_index<-63+N; A_cp_k_bk_7_index+=64)
               {
                  for (j=A_cp_j_bk_2_bk_5_index; j<N; j+=1)
                    {
                       for (k=A_cp_k_bk_7_index; k<64+A_cp_k_bk_7_index; k+=1)
                         {
                            A_cp[A_cp_index++] = A[j+k*lda];
                         }
                    }
                  A_cp_index = A_cp_index+(-N+(64+A_cp_j_bk_2_bk_5_index))*64;
               }
             if (A_cp_k_bk_7_index<N) 
               {
                  for (j=A_cp_j_bk_2_bk_5_index; j<N; j+=1)
                    {
                       for (k=A_cp_k_bk_7_index; k<N; k+=1)
                         {
                            A_cp[A_cp_index++] = A[j+k*lda];
                         }
                       A_cp_index = A_cp_index+(-N+(64+A_cp_k_bk_7_index))*1;
                    }
                  A_cp_index = A_cp_index+(-N+(64+A_cp_j_bk_2_bk_5_index))*64;
                  A_cp_k_bk_7_index = A_cp_k_bk_7_index+64;
               }
             A_cp_index = A_cp_index+(A_cp_j_bk_2_bk_5_index+64-A_cp_k_bk_7_index)*64;
             A_cp_j_bk_2_bk_5_index = A_cp_j_bk_2_bk_5_index+64;
          }
        A_cp_index = A_cp_index+(A_cp_j_bk_6_index+128-A_cp_j_bk_2_bk_5_index)*64;
        A_cp_j_bk_6_index = A_cp_j_bk_6_index+128;
     }
   omp_set_num_threads(2);
   #pragma omp  parallel  
    {
    #pragma omp  for private(__FD__C_0,__FD__C_0_0,__FD__C_0_0_0,__FD__C_0_0_0_0,__FD__A_cp__n_0,__FD__A_cp__n_0_0,__FD__A_cp__n_0_0_0,__FD__A_cp__n_0_0_0_0,__FD__A_cp_0,__FD__A_cp_0_0,__FD__A_cp_0_0_0,__FD__A_cp_0_0_0_0,_C_0_0,_C_1_0,_C_2_0,_C_3_0,_A_cp__n_0_0,_A_cp_0_0,_A_cp_1_0,_A_cp_2_0,_A_cp_3_0,k,i,j,j_bk_1,j_bk_2,i_bk_3,k_bk_4,_tmp__split)
    for (j_bk_1=0; j_bk_1<N; j_bk_1+=128)
      {
         __FD__A_cp_0 = A_cp+j_bk_1*A_cp_k_bk_7_index;
         __FD__C_0 = C+j_bk_1*ldc;
         for (j_bk_2=0; j_bk_2<-63+min(128,N-j_bk_1); j_bk_2+=64)
           {
              __FD__A_cp__n_0 = A_cp;
              __FD__C_0_0 = __FD__C_0;
              for (i_bk_3=0; i_bk_3<-63+N; i_bk_3+=64)
                {
                   __FD__A_cp_0_0 = __FD__A_cp_0;
                   __FD__A_cp__n_0_0 = __FD__A_cp__n_0;
                   for (k_bk_4=0; k_bk_4<-63+N; k_bk_4+=64)
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<64; j+=4)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<64; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+ldc,reg2);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+2*ldc,reg3);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+3*ldc,reg4);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<64; k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_mr_a(64+__FD__A_cp_0_0_0_0,reg7);
                                       vec_mov_mr_a(128+__FD__A_cp_0_0_0_0,reg8);
                                       vec_mov_mr_a(192+__FD__A_cp_0_0_0_0,reg9);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg7,reg0);
                                       vec_add_rr(reg0,reg2);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg8,reg0);
                                       vec_add_rr(reg0,reg3);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg9,reg0);
                                       vec_add_rr(reg0,reg4);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  vec_red(reg2,reg10);
                                  vec_mov_rm_1(reg2,__FD__C_0_0_0_0+ldc);
                                  vec_red(reg3,reg10);
                                  vec_mov_rm_1(reg3,__FD__C_0_0_0_0+2*ldc);
                                  vec_red(reg4,reg10);
                                  vec_mov_rm_1(reg4,__FD__C_0_0_0_0+3*ldc);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = __FD__A_cp_0_0_0+64*4;
                             __FD__C_0_0_0 = __FD__C_0_0_0+4*ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   if (k_bk_4<N) 
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<64; j+=4)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<64; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+ldc,reg2);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+2*ldc,reg3);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+3*ldc,reg4);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<-1+min(64,N-k_bk_4); k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_mr_a(64+__FD__A_cp_0_0_0_0,reg7);
                                       vec_mov_mr_a(128+__FD__A_cp_0_0_0_0,reg8);
                                       vec_mov_mr_a(192+__FD__A_cp_0_0_0_0,reg9);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg7,reg0);
                                       vec_add_rr(reg0,reg2);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg8,reg0);
                                       vec_add_rr(reg0,reg3);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg9,reg0);
                                       vec_add_rr(reg0,reg4);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  for (k=k; k<N-k_bk_4; k+=1)
                                    {
                                       vec_mov_mr_1(__FD__A_cp__n_0_0_0+k,reg5);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+k,reg6);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+(64+k),reg7);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+(128+k),reg8);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+(192+k),reg9);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg7,reg0);
                                       vec_add_rr(reg0,reg2);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg8,reg0);
                                       vec_add_rr(reg0,reg3);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg9,reg0);
                                       vec_add_rr(reg0,reg4);
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  vec_red(reg2,reg10);
                                  vec_mov_rm_1(reg2,__FD__C_0_0_0_0+ldc);
                                  vec_red(reg3,reg10);
                                  vec_mov_rm_1(reg3,__FD__C_0_0_0_0+2*ldc);
                                  vec_red(reg4,reg10);
                                  vec_mov_rm_1(reg4,__FD__C_0_0_0_0+3*ldc);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = __FD__A_cp_0_0_0+64*4;
                             __FD__C_0_0_0 = __FD__C_0_0_0+4*ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   __FD__A_cp__n_0 = __FD__A_cp__n_0+64*A_cp_k_bk_7_index;
                   __FD__C_0_0 = __FD__C_0_0+64;
                }
              if (i_bk_3<N) 
                {
                   __FD__A_cp_0_0 = __FD__A_cp_0;
                   __FD__A_cp__n_0_0 = __FD__A_cp__n_0;
                   for (k_bk_4=0; k_bk_4<-63+N; k_bk_4+=64)
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<64; j+=4)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<N-i_bk_3; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+ldc,reg2);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+2*ldc,reg3);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+3*ldc,reg4);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<64; k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_mr_a(64+__FD__A_cp_0_0_0_0,reg7);
                                       vec_mov_mr_a(128+__FD__A_cp_0_0_0_0,reg8);
                                       vec_mov_mr_a(192+__FD__A_cp_0_0_0_0,reg9);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg7,reg0);
                                       vec_add_rr(reg0,reg2);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg8,reg0);
                                       vec_add_rr(reg0,reg3);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg9,reg0);
                                       vec_add_rr(reg0,reg4);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  vec_red(reg2,reg10);
                                  vec_mov_rm_1(reg2,__FD__C_0_0_0_0+ldc);
                                  vec_red(reg3,reg10);
                                  vec_mov_rm_1(reg3,__FD__C_0_0_0_0+2*ldc);
                                  vec_red(reg4,reg10);
                                  vec_mov_rm_1(reg4,__FD__C_0_0_0_0+3*ldc);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = __FD__A_cp_0_0_0+64*4;
                             __FD__C_0_0_0 = __FD__C_0_0_0+4*ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   if (k_bk_4<N) 
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<64; j+=4)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<N-i_bk_3; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+ldc,reg2);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+2*ldc,reg3);
                                  vec_mov_mr_1(__FD__C_0_0_0_0+3*ldc,reg4);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<-1+min(64,N-k_bk_4); k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_mr_a(64+__FD__A_cp_0_0_0_0,reg7);
                                       vec_mov_mr_a(128+__FD__A_cp_0_0_0_0,reg8);
                                       vec_mov_mr_a(192+__FD__A_cp_0_0_0_0,reg9);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg7,reg0);
                                       vec_add_rr(reg0,reg2);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg8,reg0);
                                       vec_add_rr(reg0,reg3);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg9,reg0);
                                       vec_add_rr(reg0,reg4);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  for (k=k; k<N-k_bk_4; k+=1)
                                    {
                                       vec_mov_mr_1(__FD__A_cp__n_0_0_0+k,reg5);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+k,reg6);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+(64+k),reg7);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+(128+k),reg8);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+(192+k),reg9);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg7,reg0);
                                       vec_add_rr(reg0,reg2);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg8,reg0);
                                       vec_add_rr(reg0,reg3);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg9,reg0);
                                       vec_add_rr(reg0,reg4);
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  vec_red(reg2,reg10);
                                  vec_mov_rm_1(reg2,__FD__C_0_0_0_0+ldc);
                                  vec_red(reg3,reg10);
                                  vec_mov_rm_1(reg3,__FD__C_0_0_0_0+2*ldc);
                                  vec_red(reg4,reg10);
                                  vec_mov_rm_1(reg4,__FD__C_0_0_0_0+3*ldc);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = __FD__A_cp_0_0_0+64*4;
                             __FD__C_0_0_0 = __FD__C_0_0_0+4*ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   __FD__A_cp__n_0 = __FD__A_cp__n_0+64*A_cp_k_bk_7_index;
                   __FD__C_0_0 = __FD__C_0_0+64;
                }
              __FD__A_cp_0 = __FD__A_cp_0+64*A_cp_k_bk_7_index;
              __FD__C_0 = __FD__C_0+64*ldc;
           }
         if (j_bk_2<min(128,N-j_bk_1)) 
           {
              __FD__A_cp__n_0 = A_cp;
              __FD__C_0_0 = __FD__C_0;
              for (i_bk_3=0; i_bk_3<-63+N; i_bk_3+=64)
                {
                   __FD__A_cp_0_0 = __FD__A_cp_0;
                   __FD__A_cp__n_0_0 = __FD__A_cp__n_0;
                   for (k_bk_4=0; k_bk_4<-63+N; k_bk_4+=64)
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<min(128-j_bk_2,-j_bk_2+(N-j_bk_1)); j+=1)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<64; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<64; k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = 64+__FD__A_cp_0_0_0;
                             __FD__C_0_0_0 = __FD__C_0_0_0+ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   if (k_bk_4<N) 
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<min(128-j_bk_2,-j_bk_2+(N-j_bk_1)); j+=1)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<64; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<-1+min(64,N-k_bk_4); k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  for (k=k; k<N-k_bk_4; k+=1)
                                    {
                                       vec_mov_mr_1(__FD__A_cp__n_0_0_0+k,reg5);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+k,reg6);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = 64+__FD__A_cp_0_0_0;
                             __FD__C_0_0_0 = __FD__C_0_0_0+ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   __FD__A_cp__n_0 = __FD__A_cp__n_0+64*A_cp_k_bk_7_index;
                   __FD__C_0_0 = __FD__C_0_0+64;
                }
              if (i_bk_3<N) 
                {
                   __FD__A_cp_0_0 = __FD__A_cp_0;
                   __FD__A_cp__n_0_0 = __FD__A_cp__n_0;
                   for (k_bk_4=0; k_bk_4<-63+N; k_bk_4+=64)
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<min(128-j_bk_2,-j_bk_2+(N-j_bk_1)); j+=1)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<N-i_bk_3; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<64; k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = 64+__FD__A_cp_0_0_0;
                             __FD__C_0_0_0 = __FD__C_0_0_0+ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   if (k_bk_4<N) 
                     {
                        __FD__A_cp_0_0_0 = __FD__A_cp_0_0;
                        __FD__C_0_0_0 = __FD__C_0_0;
                        for (j=0; j<min(128-j_bk_2,-j_bk_2+(N-j_bk_1)); j+=1)
                          {
                             __FD__A_cp__n_0_0_0 = __FD__A_cp__n_0_0;
                             __FD__C_0_0_0_0 = __FD__C_0_0_0;
                             for (i=0; i<N-i_bk_3; i+=1)
                               {
                                  vec_mov_mr_1(__FD__C_0_0_0_0,reg1);
                                  __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0;
                                  __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0;
                                  for (k=0; k<-1+min(64,N-k_bk_4); k+=2)
                                    {
                                       vec_mov_mr_a(__FD__A_cp__n_0_0_0_0,reg5);
                                       vec_mov_mr_a(__FD__A_cp_0_0_0_0,reg6);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                       __FD__A_cp_0_0_0_0 = __FD__A_cp_0_0_0_0+2;
                                       __FD__A_cp__n_0_0_0_0 = __FD__A_cp__n_0_0_0_0+2;
                                    }
                                  for (k=k; k<N-k_bk_4; k+=1)
                                    {
                                       vec_mov_mr_1(__FD__A_cp__n_0_0_0+k,reg5);
                                       vec_mov_mr_1(__FD__A_cp_0_0_0+k,reg6);
                                       vec_mov_rr(reg5,reg0);
                                       vec_mul_rr(reg6,reg0);
                                       vec_add_rr(reg0,reg1);
                                    }
                                  vec_red(reg1,reg10);
                                  vec_mov_rm_1(reg1,__FD__C_0_0_0_0);
                                  __FD__A_cp__n_0_0_0 = 64+__FD__A_cp__n_0_0_0;
                                  __FD__C_0_0_0_0 = 1+__FD__C_0_0_0_0;
                               }
                             __FD__A_cp_0_0_0 = 64+__FD__A_cp_0_0_0;
                             __FD__C_0_0_0 = __FD__C_0_0_0+ldc;
                          }
                        __FD__A_cp_0_0 = __FD__A_cp_0_0+64*64;
                        __FD__A_cp__n_0_0 = __FD__A_cp__n_0_0+64*64;
                     }
                   __FD__A_cp__n_0 = __FD__A_cp__n_0+64*A_cp_k_bk_7_index;
                   __FD__C_0_0 = __FD__C_0_0+64;
                }
              __FD__A_cp_0 = __FD__A_cp_0+64*A_cp_k_bk_7_index;
              __FD__C_0 = __FD__C_0+64*ldc;
           }
      }
    }
   
   free(A_cp_alloc);
}}




