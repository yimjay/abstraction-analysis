#define max(a,b) (((a) < (b))? (b) : (a))
#define min(a,b) (((a) < (b))? (a) : (b))
#include <stdlib.h>
#include <omp.h>


void trisolv(const int M,const int N,const int K,const double alpha,const double *L,const int lda,const double *B1,const int ldb1,const double beta,double *B,const int ldb)
{
    long i,j,k;

{
   int i_bk_1;
   int i_bk_2;
   int j_bk_3;
   int k_bk_4;
   int L_cp_j_bk_5_index;
   int L_cp_k_bk_6_index;
   int L_cp_index;
   double* L_cp_alloc;
   double* L_cp;
   double _L_cp_0;
   double _L_cp__n_0_0;
   double _B_0_0;
   double _B_1_0;
   double _B_2_0;
   double _B_3_0;
   double _B__n_0_0;
   double _B__n_1_0;
   double _B__n_2_0;
   double _B__n_3_0;
   double* __FD__L_cp_0;
   double* __FD__L_cp_0_0;
   double* __FD__L_cp__n_0;
   double* __FD__L_cp__n_0_0;
   double* __FD__L_cp__n_0_0_0;
   double* __FD__L_cp__n_0_0_0_0;
   double* __FD__B_0;
   double* __FD__B_0_0;
   double* __FD__B_0_0_0;
   double* __FD__B_0_0_0_0;
   double* __FD__B__n_0;
   double* __FD__B__n_0_0;
   double* __FD__B__n_0_0_0;
   double* __FD__B__n_0_0_0_0;
   L_cp_alloc=(double*)malloc((64*((63+N)/64)*(64*((63+N)/64))+(1<<16))*sizeof(double));
   L_cp=(double*)((size_t)L_cp_alloc + (1 << 16) >> 16 << 16);
   L_cp_index = 0;
   for (L_cp_j_bk_5_index=0; L_cp_j_bk_5_index<-63+N; L_cp_j_bk_5_index+=64)
     {
        for (L_cp_k_bk_6_index=0; L_cp_k_bk_6_index<-63+N; L_cp_k_bk_6_index+=64)
          {
             for (j=L_cp_j_bk_5_index; j<64+L_cp_j_bk_5_index; j+=1)
               {
                  for (k=L_cp_k_bk_6_index; k<64+L_cp_k_bk_6_index; k+=1)
                    {
                       L_cp[L_cp_index++] = L[j*lda+k];
                    }
               }
          }
        if (L_cp_k_bk_6_index<N) 
          {
             for (j=L_cp_j_bk_5_index; j<64+L_cp_j_bk_5_index; j+=1)
               {
                  for (k=L_cp_k_bk_6_index; k<N; k+=1)
                    {
                       L_cp[L_cp_index++] = L[j*lda+k];
                    }
                  L_cp_index = L_cp_index+(-N+(64+L_cp_k_bk_6_index))*1;
               }
             L_cp_k_bk_6_index = L_cp_k_bk_6_index+64;
          }
     }
   if (L_cp_j_bk_5_index<N) 
     {
        for (L_cp_k_bk_6_index=0; L_cp_k_bk_6_index<-63+N; L_cp_k_bk_6_index+=64)
          {
             for (j=L_cp_j_bk_5_index; j<N; j+=1)
               {
                  for (k=L_cp_k_bk_6_index; k<64+L_cp_k_bk_6_index; k+=1)
                    {
                       L_cp[L_cp_index++] = L[j*lda+k];
                    }
               }
             L_cp_index = L_cp_index+(-N+(64+L_cp_j_bk_5_index))*64;
          }
        if (L_cp_k_bk_6_index<N) 
          {
             for (j=L_cp_j_bk_5_index; j<N; j+=1)
               {
                  for (k=L_cp_k_bk_6_index; k<N; k+=1)
                    {
                       L_cp[L_cp_index++] = L[j*lda+k];
                    }
                  L_cp_index = L_cp_index+(-N+(64+L_cp_k_bk_6_index))*1;
               }
             L_cp_index = L_cp_index+(-N+(64+L_cp_j_bk_5_index))*64;
             L_cp_k_bk_6_index = L_cp_k_bk_6_index+64;
          }
        L_cp_index = L_cp_index+(L_cp_j_bk_5_index+64-L_cp_k_bk_6_index)*64;
        L_cp_j_bk_5_index = L_cp_j_bk_5_index+64;
     }
   omp_set_num_threads(2);
   #pragma omp  parallel  
    {
    #pragma omp  for private(__FD__B__n_0,__FD__B__n_0_0,__FD__B__n_0_0_0,__FD__B__n_0_0_0_0,__FD__B_0,__FD__B_0_0,__FD__B_0_0_0,__FD__B_0_0_0_0,__FD__L_cp__n_0,__FD__L_cp__n_0_0,__FD__L_cp__n_0_0_0,__FD__L_cp__n_0_0_0_0,__FD__L_cp_0,__FD__L_cp_0_0,_B__n_0_0,_B__n_1_0,_B__n_2_0,_B__n_3_0,_B_0_0,_B_1_0,_B_2_0,_B_3_0,_L_cp__n_0_0,_L_cp_0,k,j,i,i_bk_1,i_bk_2,j_bk_3,k_bk_4)
    for (i_bk_1=0; i_bk_1<N; i_bk_1+=256)
      {
         __FD__B_0 = B+i_bk_1;
         __FD__B__n_0 = B+i_bk_1;
         for (i_bk_2=0; i_bk_2<-63+min(256,N-i_bk_1); i_bk_2+=64)
           {
              __FD__L_cp_0 = L_cp;
              __FD__L_cp__n_0 = L_cp;
              __FD__B__n_0_0 = __FD__B__n_0;
              for (j_bk_3=0; j_bk_3<-63+N; j_bk_3+=64)
                {
                   __FD__L_cp__n_0_0 = __FD__L_cp__n_0;
                   __FD__B_0_0 = __FD__B_0;
                   for (k_bk_4=0; k_bk_4<-1+j_bk_3; k_bk_4+=64)
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<64; i+=4)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<64; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _B__n_1_0 = __FD__B__n_0_0_0_0[1];
                                  _B__n_2_0 = __FD__B__n_0_0_0_0[2];
                                  _B__n_3_0 = __FD__B__n_0_0_0_0[3];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<64; k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _B_1_0 = __FD__B_0_0_0_0[1];
                                       _B_2_0 = __FD__B_0_0_0_0[2];
                                       _B_3_0 = __FD__B_0_0_0_0[3];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       _B__n_1_0 = _B__n_1_0-_L_cp__n_0_0*_B_1_0;
                                       _B__n_2_0 = _B__n_2_0-_L_cp__n_0_0*_B_2_0;
                                       _B__n_3_0 = _B__n_3_0-_L_cp__n_0_0*_B_3_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__B__n_0_0_0_0[1] = _B__n_1_0;
                                  __FD__B__n_0_0_0_0[2] = _B__n_2_0;
                                  __FD__B__n_0_0_0_0[3] = _B__n_3_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = __FD__B_0_0_0+4;
                             __FD__B__n_0_0_0 = __FD__B__n_0_0_0+4;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   if (k_bk_4<63+j_bk_3) 
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<64; i+=4)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<64; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _B__n_1_0 = __FD__B__n_0_0_0_0[1];
                                  _B__n_2_0 = __FD__B__n_0_0_0_0[2];
                                  _B__n_3_0 = __FD__B__n_0_0_0_0[3];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<-k_bk_4+(j_bk_3+j); k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _B_1_0 = __FD__B_0_0_0_0[1];
                                       _B_2_0 = __FD__B_0_0_0_0[2];
                                       _B_3_0 = __FD__B_0_0_0_0[3];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       _B__n_1_0 = _B__n_1_0-_L_cp__n_0_0*_B_1_0;
                                       _B__n_2_0 = _B__n_2_0-_L_cp__n_0_0*_B_2_0;
                                       _B__n_3_0 = _B__n_3_0-_L_cp__n_0_0*_B_3_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  _B__n_0_0 = _B__n_0_0/_L_cp_0;
                                  _B__n_1_0 = _B__n_1_0/_L_cp_0;
                                  _B__n_2_0 = _B__n_2_0/_L_cp_0;
                                  _B__n_3_0 = _B__n_3_0/_L_cp_0;
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__B__n_0_0_0_0[1] = _B__n_1_0;
                                  __FD__B__n_0_0_0_0[2] = _B__n_2_0;
                                  __FD__B__n_0_0_0_0[3] = _B__n_3_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = __FD__B_0_0_0+4;
                             __FD__B__n_0_0_0 = __FD__B__n_0_0_0+4;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   __FD__L_cp_0 = __FD__L_cp_0+64*L_cp_k_bk_6_index;
                   __FD__L_cp__n_0 = __FD__L_cp__n_0+64*L_cp_k_bk_6_index;
                   __FD__B__n_0_0 = __FD__B__n_0_0+64*ldb;
                }
              if (j_bk_3<N) 
                {
                   __FD__L_cp__n_0_0 = __FD__L_cp__n_0;
                   __FD__B_0_0 = __FD__B_0;
                   for (k_bk_4=0; k_bk_4<-1+j_bk_3; k_bk_4+=64)
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<64; i+=4)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<N-j_bk_3; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _B__n_1_0 = __FD__B__n_0_0_0_0[1];
                                  _B__n_2_0 = __FD__B__n_0_0_0_0[2];
                                  _B__n_3_0 = __FD__B__n_0_0_0_0[3];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<64; k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _B_1_0 = __FD__B_0_0_0_0[1];
                                       _B_2_0 = __FD__B_0_0_0_0[2];
                                       _B_3_0 = __FD__B_0_0_0_0[3];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       _B__n_1_0 = _B__n_1_0-_L_cp__n_0_0*_B_1_0;
                                       _B__n_2_0 = _B__n_2_0-_L_cp__n_0_0*_B_2_0;
                                       _B__n_3_0 = _B__n_3_0-_L_cp__n_0_0*_B_3_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__B__n_0_0_0_0[1] = _B__n_1_0;
                                  __FD__B__n_0_0_0_0[2] = _B__n_2_0;
                                  __FD__B__n_0_0_0_0[3] = _B__n_3_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = __FD__B_0_0_0+4;
                             __FD__B__n_0_0_0 = __FD__B__n_0_0_0+4;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   if (k_bk_4<63+j_bk_3) 
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<64; i+=4)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<N-j_bk_3; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _B__n_1_0 = __FD__B__n_0_0_0_0[1];
                                  _B__n_2_0 = __FD__B__n_0_0_0_0[2];
                                  _B__n_3_0 = __FD__B__n_0_0_0_0[3];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<-k_bk_4+(j_bk_3+j); k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _B_1_0 = __FD__B_0_0_0_0[1];
                                       _B_2_0 = __FD__B_0_0_0_0[2];
                                       _B_3_0 = __FD__B_0_0_0_0[3];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       _B__n_1_0 = _B__n_1_0-_L_cp__n_0_0*_B_1_0;
                                       _B__n_2_0 = _B__n_2_0-_L_cp__n_0_0*_B_2_0;
                                       _B__n_3_0 = _B__n_3_0-_L_cp__n_0_0*_B_3_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  _B__n_0_0 = _B__n_0_0/_L_cp_0;
                                  _B__n_1_0 = _B__n_1_0/_L_cp_0;
                                  _B__n_2_0 = _B__n_2_0/_L_cp_0;
                                  _B__n_3_0 = _B__n_3_0/_L_cp_0;
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__B__n_0_0_0_0[1] = _B__n_1_0;
                                  __FD__B__n_0_0_0_0[2] = _B__n_2_0;
                                  __FD__B__n_0_0_0_0[3] = _B__n_3_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = __FD__B_0_0_0+4;
                             __FD__B__n_0_0_0 = __FD__B__n_0_0_0+4;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   __FD__L_cp_0 = __FD__L_cp_0+64*L_cp_k_bk_6_index;
                   __FD__L_cp__n_0 = __FD__L_cp__n_0+64*L_cp_k_bk_6_index;
                   __FD__B__n_0_0 = __FD__B__n_0_0+64*ldb;
                }
              __FD__B_0 = __FD__B_0+64;
              __FD__B__n_0 = __FD__B__n_0+64;
           }
         if (i_bk_2<min(256,N-i_bk_1)) 
           {
              __FD__L_cp_0 = L_cp;
              __FD__L_cp__n_0 = L_cp;
              __FD__B__n_0_0 = __FD__B__n_0;
              for (j_bk_3=0; j_bk_3<-63+N; j_bk_3+=64)
                {
                   __FD__L_cp__n_0_0 = __FD__L_cp__n_0;
                   __FD__B_0_0 = __FD__B_0;
                   for (k_bk_4=0; k_bk_4<-1+j_bk_3; k_bk_4+=64)
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<min(256-i_bk_2,-i_bk_2+(N-i_bk_1)); i+=1)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<64; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<64; k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = 1+__FD__B_0_0_0;
                             __FD__B__n_0_0_0 = 1+__FD__B__n_0_0_0;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   if (k_bk_4<63+j_bk_3) 
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<min(256-i_bk_2,-i_bk_2+(N-i_bk_1)); i+=1)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<64; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<-k_bk_4+(j_bk_3+j); k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  _B__n_0_0 = _B__n_0_0/_L_cp_0;
                                  _B__n_1_0 = _B__n_1_0/_L_cp_0;
                                  _B__n_2_0 = _B__n_2_0/_L_cp_0;
                                  _B__n_3_0 = _B__n_3_0/_L_cp_0;
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = 1+__FD__B_0_0_0;
                             __FD__B__n_0_0_0 = 1+__FD__B__n_0_0_0;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   __FD__L_cp_0 = __FD__L_cp_0+64*L_cp_k_bk_6_index;
                   __FD__L_cp__n_0 = __FD__L_cp__n_0+64*L_cp_k_bk_6_index;
                   __FD__B__n_0_0 = __FD__B__n_0_0+64*ldb;
                }
              if (j_bk_3<N) 
                {
                   __FD__L_cp__n_0_0 = __FD__L_cp__n_0;
                   __FD__B_0_0 = __FD__B_0;
                   for (k_bk_4=0; k_bk_4<-1+j_bk_3; k_bk_4+=64)
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<min(256-i_bk_2,-i_bk_2+(N-i_bk_1)); i+=1)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<N-j_bk_3; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<64; k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = 1+__FD__B_0_0_0;
                             __FD__B__n_0_0_0 = 1+__FD__B__n_0_0_0;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   if (k_bk_4<63+j_bk_3) 
                     {
                        __FD__B_0_0_0 = __FD__B_0_0;
                        __FD__B__n_0_0_0 = __FD__B__n_0_0;
                        for (i=0; i<min(256-i_bk_2,-i_bk_2+(N-i_bk_1)); i+=1)
                          {
                             __FD__L_cp_0_0 = __FD__L_cp_0;
                             __FD__L_cp__n_0_0_0 = __FD__L_cp__n_0_0;
                             __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0;
                             for (j=0; j<N-j_bk_3; j+=1)
                               {
                                  _B__n_0_0 = __FD__B__n_0_0_0_0[0];
                                  _L_cp_0 = __FD__L_cp_0_0[64*j_bk_3+j];
                                  __FD__L_cp__n_0_0_0_0 = __FD__L_cp__n_0_0_0;
                                  __FD__B_0_0_0_0 = __FD__B_0_0_0;
                                  for (k=0; k<-k_bk_4+(j_bk_3+j); k+=1)
                                    {
                                       _B_0_0 = __FD__B_0_0_0_0[0];
                                       _L_cp__n_0_0 = __FD__L_cp__n_0_0_0_0[0];
                                       _B__n_0_0 = _B__n_0_0-_L_cp__n_0_0*_B_0_0;
                                       __FD__L_cp__n_0_0_0_0 = 1+__FD__L_cp__n_0_0_0_0;
                                       __FD__B_0_0_0_0 = __FD__B_0_0_0_0+ldb;
                                    }
                                  _B__n_0_0 = _B__n_0_0/_L_cp_0;
                                  _B__n_1_0 = _B__n_1_0/_L_cp_0;
                                  _B__n_2_0 = _B__n_2_0/_L_cp_0;
                                  _B__n_3_0 = _B__n_3_0/_L_cp_0;
                                  __FD__B__n_0_0_0_0[0] = _B__n_0_0;
                                  __FD__L_cp_0_0 = 64+__FD__L_cp_0_0;
                                  __FD__L_cp__n_0_0_0 = 64+__FD__L_cp__n_0_0_0;
                                  __FD__B__n_0_0_0_0 = __FD__B__n_0_0_0_0+ldb;
                               }
                             __FD__B_0_0_0 = 1+__FD__B_0_0_0;
                             __FD__B__n_0_0_0 = 1+__FD__B__n_0_0_0;
                          }
                        __FD__L_cp__n_0_0 = __FD__L_cp__n_0_0+64*64;
                        __FD__B_0_0 = __FD__B_0_0+64*ldb;
                     }
                   __FD__L_cp_0 = __FD__L_cp_0+64*L_cp_k_bk_6_index;
                   __FD__L_cp__n_0 = __FD__L_cp__n_0+64*L_cp_k_bk_6_index;
                   __FD__B__n_0_0 = __FD__B__n_0_0+64*ldb;
                }
              __FD__B_0 = __FD__B_0+64;
              __FD__B__n_0 = __FD__B__n_0+64;
           }
      }
    }
   
   free(L_cp_alloc);
}}


