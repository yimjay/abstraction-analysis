#define max(a,b) (((a) < (b))? (b) : (a))
#define min(a,b) (((a) < (b))? (a) : (b))
#include <omp.h>


void dtrmv(const int M,const int N,const double alpha,const double *A,const int lda,const double *X,const int incX,const double beta,double *Y,const int incY)
{
   int i,j;
{
   int i_bk_1;
   int i_bk_2;
   int j_bk_3;
   double _A_0_0;
   double _A_1_0;
   double _A_2_0;
   double _A_3_0;
   double _X_0;
   double _Y_0;
   double _Y_1;
   double _Y_2;
   double _Y_3;
   double* __FD__A_0;
   double* __FD__A_0_0;
   double* __FD__A_0_0_0;
   double* __FD__X_0;
   double* __FD__Y_0;
   double* __FD__Y_0_0;
   omp_set_num_threads(2);
   #pragma omp  parallel  
    {
    #pragma omp  for private(__FD__Y_0,__FD__Y_0_0,__FD__X_0,__FD__A_0,__FD__A_0_0,__FD__A_0_0_0,_Y_0,_Y_1,_Y_2,_Y_3,_X_0,_A_0_0,_A_1_0,_A_2_0,_A_3_0,j,i,i_bk_1,i_bk_2,j_bk_3)
    for (i_bk_1=0; i_bk_1<M; i_bk_1+=256)
      {
         __FD__A_0 = A+i_bk_1;
         __FD__Y_0 = Y+i_bk_1;
         for (i_bk_2=0; i_bk_2<-63+min(256,M-i_bk_1); i_bk_2+=64)
           {
              if ((j_bk_3=i_bk_1+i_bk_2)<N) 
                {
                   __FD__A_0_0 = __FD__A_0;
                   __FD__Y_0_0 = __FD__Y_0;
                   for (i=0; i<64; i+=4)
                     {
                        _Y_0 = __FD__Y_0_0[0];
                        _Y_1 = __FD__Y_0_0[1];
                        _Y_2 = __FD__Y_0_0[2];
                        _Y_3 = __FD__Y_0_0[3];
                        __FD__A_0_0_0 = __FD__A_0_0+max(i_bk_1+i_bk_2,i_bk_1+(i_bk_2+i))*lda;
                        __FD__X_0 = X+max(i_bk_1+i_bk_2,i_bk_1+(i_bk_2+i));
                        for (j=i_bk_1+(i_bk_2+i); j<-1+min(64+(i_bk_1+i_bk_2),N); j+=2)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _A_1_0 = __FD__A_0_0_0[1];
                             _A_2_0 = __FD__A_0_0_0[2];
                             _A_3_0 = __FD__A_0_0_0[3];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+(1+i))) 
                               {
                                  _Y_1 = _Y_1+_A_1_0*_X_0;
                               }
                             /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+(2+i))) 
                               {
                                  _Y_2 = _Y_2+_A_2_0*_X_0;
                               }
                             /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+(3+i))) 
                               {
                                  _Y_3 = _Y_3+_A_3_0*_X_0;
                               }
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _A_1_0 = __FD__A_0_0_0[1];
                             _A_2_0 = __FD__A_0_0_0[2];
                             _A_3_0 = __FD__A_0_0_0[3];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             _Y_1 = _Y_1+_A_1_0*_X_0;
                             /*Loop Bound*/if (1+j>=i_bk_1+(i_bk_2+(2+i))) 
                               {
                                  _Y_2 = _Y_2+_A_2_0*_X_0;
                               }
                             /*Loop Bound*/if (1+j>=i_bk_1+(i_bk_2+(3+i))) 
                               {
                                  _Y_3 = _Y_3+_A_3_0*_X_0;
                               }
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        for (j=j; j<min(64+(i_bk_1+i_bk_2),N); j+=1)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _A_1_0 = __FD__A_0_0_0[1];
                             _A_2_0 = __FD__A_0_0_0[2];
                             _A_3_0 = __FD__A_0_0_0[3];
                             /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+i)) 
                               {
                                  /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+i)) 
                                    {
                                       /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+i)) 
                                         {
                                            _Y_0 = _Y_0+_A_0_0*_X_0;
                                         }
                                       /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+(1+i))) 
                                         {
                                            _Y_1 = _Y_1+_A_1_0*_X_0;
                                         }
                                    }
                                  /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+(2+i))) 
                                    {
                                       _Y_2 = _Y_2+_A_2_0*_X_0;
                                    }
                               }
                             /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+(3+i))) 
                               {
                                  _Y_3 = _Y_3+_A_3_0*_X_0;
                               }
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        __FD__Y_0_0[0] = _Y_0;
                        __FD__Y_0_0[1] = _Y_1;
                        __FD__Y_0_0[2] = _Y_2;
                        __FD__Y_0_0[3] = _Y_3;
                        __FD__A_0_0 = __FD__A_0_0+4;
                        __FD__Y_0_0 = __FD__Y_0_0+4;
                     }
                }
              for (j_bk_3=64+(i_bk_1+i_bk_2); j_bk_3<N; j_bk_3+=64)
                {
                   __FD__A_0_0 = __FD__A_0;
                   __FD__Y_0_0 = __FD__Y_0;
                   for (i=0; i<64; i+=4)
                     {
                        _Y_0 = __FD__Y_0_0[0];
                        _Y_1 = __FD__Y_0_0[1];
                        _Y_2 = __FD__Y_0_0[2];
                        _Y_3 = __FD__Y_0_0[3];
                        __FD__A_0_0_0 = __FD__A_0_0+j_bk_3*lda;
                        __FD__X_0 = X+j_bk_3;
                        for (j=j_bk_3; j<-1+min(64+j_bk_3,N); j+=2)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _A_1_0 = __FD__A_0_0_0[1];
                             _A_2_0 = __FD__A_0_0_0[2];
                             _A_3_0 = __FD__A_0_0_0[3];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             _Y_1 = _Y_1+_A_1_0*_X_0;
                             _Y_2 = _Y_2+_A_2_0*_X_0;
                             _Y_3 = _Y_3+_A_3_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _A_1_0 = __FD__A_0_0_0[1];
                             _A_2_0 = __FD__A_0_0_0[2];
                             _A_3_0 = __FD__A_0_0_0[3];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             _Y_1 = _Y_1+_A_1_0*_X_0;
                             _Y_2 = _Y_2+_A_2_0*_X_0;
                             _Y_3 = _Y_3+_A_3_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        for (j=j; j<min(64+j_bk_3,N); j+=1)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _A_1_0 = __FD__A_0_0_0[1];
                             _A_2_0 = __FD__A_0_0_0[2];
                             _A_3_0 = __FD__A_0_0_0[3];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             _Y_1 = _Y_1+_A_1_0*_X_0;
                             _Y_2 = _Y_2+_A_2_0*_X_0;
                             _Y_3 = _Y_3+_A_3_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        __FD__Y_0_0[0] = _Y_0;
                        __FD__Y_0_0[1] = _Y_1;
                        __FD__Y_0_0[2] = _Y_2;
                        __FD__Y_0_0[3] = _Y_3;
                        __FD__A_0_0 = __FD__A_0_0+4;
                        __FD__Y_0_0 = __FD__Y_0_0+4;
                     }
                }
              __FD__A_0 = __FD__A_0+64;
              __FD__Y_0 = __FD__Y_0+64;
           }
         if (i_bk_2<min(256,M-i_bk_1)) 
           {
              if ((j_bk_3=i_bk_1+i_bk_2)<N) 
                {
                   __FD__A_0_0 = __FD__A_0;
                   __FD__Y_0_0 = __FD__Y_0;
                   for (i=0; i<min(256-i_bk_2,-i_bk_2+(M-i_bk_1)); i+=1)
                     {
                        _Y_0 = __FD__Y_0_0[0];
                        __FD__A_0_0_0 = __FD__A_0_0+max(i_bk_1+i_bk_2,i_bk_1+(i_bk_2+i))*lda;
                        __FD__X_0 = X+max(i_bk_1+i_bk_2,i_bk_1+(i_bk_2+i));
                        for (j=i_bk_1+(i_bk_2+i); j<-1+min(64+(i_bk_1+i_bk_2),N); j+=2)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        for (j=j; j<min(64+(i_bk_1+i_bk_2),N); j+=1)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+i)) 
                               {
                                  /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+i)) 
                                    {
                                       /*Loop Bound*/if (j>=i_bk_1+(i_bk_2+i)) 
                                         {
                                            _Y_0 = _Y_0+_A_0_0*_X_0;
                                         }
                                    }
                               }
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        __FD__Y_0_0[0] = _Y_0;
                        __FD__A_0_0 = 1+__FD__A_0_0;
                        __FD__Y_0_0 = 1+__FD__Y_0_0;
                     }
                }
              for (j_bk_3=64+(i_bk_1+i_bk_2); j_bk_3<N; j_bk_3+=64)
                {
                   __FD__A_0_0 = __FD__A_0;
                   __FD__Y_0_0 = __FD__Y_0;
                   for (i=0; i<min(256-i_bk_2,-i_bk_2+(M-i_bk_1)); i+=1)
                     {
                        _Y_0 = __FD__Y_0_0[0];
                        __FD__A_0_0_0 = __FD__A_0_0+j_bk_3*lda;
                        __FD__X_0 = X+j_bk_3;
                        for (j=j_bk_3; j<-1+min(64+j_bk_3,N); j+=2)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        for (j=j; j<min(64+j_bk_3,N); j+=1)
                          {
                             _X_0 = __FD__X_0[0];
                             _A_0_0 = __FD__A_0_0_0[0];
                             _Y_0 = _Y_0+_A_0_0*_X_0;
                             __FD__A_0_0_0 = __FD__A_0_0_0+lda;
                             __FD__X_0 = 1+__FD__X_0;
                          }
                        __FD__Y_0_0[0] = _Y_0;
                        __FD__A_0_0 = 1+__FD__A_0_0;
                        __FD__Y_0_0 = 1+__FD__Y_0_0;
                     }
                }
              __FD__A_0 = __FD__A_0+64;
              __FD__Y_0 = __FD__Y_0+64;
           }
      }
    }
   
}}

