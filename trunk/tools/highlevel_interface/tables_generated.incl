<********************************************************************>
<*  This file is automatically generated from groups.txt,       *>
<* interferences.txt, and transformations.txt. Do not modify this  *>
<* file. If something happens to this file and it no longer works,  *>
<* regenerate it by running `make tables` in the poet_translator   *>
<* directory. If you want to change any of these values, modify   *>
<* groups.txt, interferences.txt, or transformations.txt. The     *>
<* instructions for doing so are in each of the corresponding files.*>
<********************************************************************>

<*  mapping transformations to their information, in the format of 
     (required_params optional_params tuning_params tracing_handles index)
    each tracing_handle entry in the format of (param_name (handle_type:var_list|code ast_name(if handle_type==code) global_trace_name)) 
    *>
<define transformations_table MAP{
  "TraceNestedLoops" => (("inner_loops" "target"),NULL,NULL,NULL,NULL),
  "REPLACE" => (("from" "to" "target"),NULL,NULL,NULL,NULL),
  "EraseTraceHandle" => (("inner_loop" "target"),("repl"),NULL,NULL,NULL),
  "ParallelizeLoop" => ("target",("private" "reduction" "reduction_op" "model"),("threads" "factor"),("private",("var_list",NULL,"TRACE_VARS")),1),
  "SkewLoops" => (("inner_loop" "target"),NULL,("factor"),NULL,6),
  "FuseLoops" => (("loop_to_fuse" "target"),("index_start" "reserve_target" "trace_fusion" "trace"),NULL,("index_start",("code","exp_list","TRACE_EXP")),2),
  "DistributeLoop" => (("statement_to_dist" "target"),("trace_dist" "statement_to_split" "private" "private_size" "data_type"),NULL,("private",("var_list",NULL,"TRACE_VARS")),8),
  "InlineFunction" => (("function_definition" "target"), ("parameters_to_replace"), NULL, NULL, 12),
  "StrengthReduction" => (("type" "target"), ("fp_division" "appendix" "subexpression" "constant" "data_type" "shift_statement" "minus_result"), NULL, ("subexpression", ("code","exp","TRACE_EXP")), 13),
  "RedundancyElimination" => (("type" "target"), ("redundant_branch_flag" "else_branch" "function_definition" "ret_statement" "used_place" "erase_flag" "index_start" "branch_statement" "expression" "data_type"), NULL, NULL, 14),
  "SoftwarePrefetch" => (("address" "target"), ("rw" "locality" "hint" "compiler"), NULL, NULL, 15),
  "BlockLoops" => ((("inner_loop","Nest.body") "target"),("trace" "trace_innerNest" "trace_mod" "trace_decl" "trace_cleanup" "cleanup"),("factor"),NULL,3),
  "CopyRepl" => (("aref" "dim" "target"),("init" "save" "data_type" "trace_vars" "trace_decl" "trace_incl" "trace_mod" "trace" "cpBlock"),NULL,("aref",("code","ArrayAccess","TRACE_EXP")), 4),
  "PermuteLoops" => ((("inner_loop","Nest.body") "target"),("order" "trace"),NULL,NULL,5),
  "UnrollJam" => (("inner_loop" "target"),("cleanup" "trace"),("factor"),NULL,6),
  "ScalarRepl" => (("aref" "dim" ("target","Nest.body")),("data_type" "trace_vars" "trace_decl" "trace_mod" "trace" "init" "save" "scalar_num" "init_loc"),NULL,("aref",("code","ArrayAccess","TRACE_EXP")),7),
  "UnrollLoop" => (("target"),("cleanup" "trace"),("factor"),NULL,9),
  "CleanupBlockedNests" => (("target"),NULL,NULL,NULL,10),
  "PipelineLoop" => (("inner_loop" "target"),("scope" "private" "dep" "trace_incl" "trace"),(NULL),("private",("var_list",NULL,"TRACE_VARS")),11)
} />

<*  Parameters *>
<define transformation_parameter_table MAP{
  "from" => ("HANDLE","unimplemented",NULL,NULL),
  "to" => ("HANDLE","unimplemented",NULL,NULL),
  "target" => ("HANDLE","unimplemented",NULL,"group"),
  "inner_loop" => ("HANDLE","unimplemented",NULL,"group"),
  "inner_loops" => ("HANDLE","unimplemented",NULL,"group"),
  "repl" => ("HANDLE","unimplemented",NULL,"group"),
  "scope" => ("HANDLE","unimplemented",NULL,"group"),
  "reduction" => ("LIST(ID)","unimplemented",NULL,NULL),
  "private" => ("HANDLE","unimplemented",NULL,NULL),
  "private_size" => ("HANDLE","unimplemented",NULL,NULL),
  "reduction_op" => ("SELECT",("+" "*"),NULL,NULL),
  "model" => ( "SELECT",("OMP" "VEC"),NULL,NULL), 
  "factor" => ("LIST(INT)",(0,256),"MACRO",NULL),
  "threads" => ("INT",(0,256),"MACRO",NULL),
  "statement_to_dist" => ("HANDLE","unimplemented",NULL,"group"),
  "statement_to_split" => ("HANDLE","unimplemented",NULL,"group"),
  "outer_nest" => ("HANDLE","unimplemented",NULL,"group"),
  "function_definition" => ("HANDLE","unimplemented",NULL,"group"),
  "parameters_to_replace" => ("LIST(ID)", "unimplemented",NULL,NULL),
  "type" => ("INT",(1,6),NULL,NULL),
  "fp_division" => ("HANDLE","unimplemented",NULL,"group"),
  "appendix" => ("HANDLE","unimplemented",NULL,"group"),
  "subexpression" => ("HANDLE","unimplemented",NULL,"group"),
  "constant" => ("HANDLE", "unimplemented", NULL, "group"),
  "shift_statement" => ("LIST(HANDLE)", "unimplemented", NULL, "group"),
  "minus_result" => ("HANDLE", "unimplemented", NULL, "group"),
  "redundant_branch_flag" => ("INT", (0,1),NULL,NULL),
  "else_branch" => ("HANDLE","unimplemented",NULL,"group"),
  "ret_statement" => ("HANDLE","unimplemented",NULL,"group"),
  "used_place" => ("LIST(HANDLE)","unimplemented",NULL,"group"),
  "erase_flag" => ("LIST(INT)",(0,1),NULL,NULL),
  "branch_statement" => ("HANDLE","unimplemented",NULL,"group"),
  "expression" => ("HANDLE","unimplemented",NULL,"group"),
  "address" => ("STRING","unimplemented",NULL,NULL),
  "rw" => ("INT", (0,1), NULL, NULL),
  "locality" => ("INT", (0,3), NULL, NULL),
  "hint" => ("INT", (0,2), NULL, NULL),
  "compiler" => ("STRING", "unimplemented", NULL, NULL),
  "trace_dist" => ("STRING","unimplemented",NULL,NULL),
  "data_type" => ("HANDLE","unimplemented","GLOBAL.ARRAY_ELEM_TYPE",NULL),
  "loop_to_fuse" => ("LIST(HANDLE)","unimplemented",NULL,"group"),
  "trace_fusion" => ("STRING","unimplemented",NULL,NULL),
  "index_start" => ("HANDLE","unimplemented",NULL,"group"),
  "reserve_target" => ("INT", (0,1), 0, NULL),
  "trace" => ("ID","unimplemented",NULL,NULL),
  "trace_innerNest" => ("ID","unimplemented",NULL,NULL),
  "trace_cleanup" => ("ID","unimplemented",NULL,NULL),
  "cleanup" => ("INT",(0,1),0,NULL),
  "trace_ivars" => ("HANDLE","unimplemented",NULL,NULL),
  "aref" => ("HANDLE","unimplemented",NULL,NULL),
  "dim" => ("LIST(HANDLE)","unimplemented",NULL,"group"),
  "trace_vars" => ("HANDLE","unimplemented",NULL,NULL),
  "trace_decl" => ("HANDLE","unimplemented","GLOBAL.TRACE_DECL",NULL),
  "trace_incl" => ("HANDLE","unimplemented","GLOBAL.TRACE_INCL",NULL),
  "trace_mod" => ("HANDLE","unimplemented","GLOBAL.TRACE_EXP",NULL),
  "trace" => ("HANDLE","unimplemented",NULL,NULL),
  "cpBlock" => ("STRING","unimplemented",NULL,NULL),
  "init" => ("INT",(0,1),NULL,"group"),
  "save" => ("INT",(0,1),NULL,"group"),
  "scalar_num" => ("INT",(0,1),NULL,"group"),
  "init_loc" => ("LIST(HANDLE)","unimplemented",NULL,NULL),
  "save_loc" => ("HANDLE","unimplemented",NULL,NULL),
  "order" => ("INT",(0,256),0,NULL),
  "dep" => ("LIST(INT)",(0,256),NULL,NULL)
} />

<define cleanup_table 
   ("BlockLoops", 
      ("CleanupBlockedNests",("target",("xform","target","")))) />

<*  Interferences *>
<define interference_table (
  ( ("ParallelizeLoop" "PipelineLoop"),"SkewLoops", NULL, NULL, 
      ("*",("REPLACE",(
        ("target",("xform","private",""))
        ("to",("literal","\"\"",""))
        ("from",("ifx","inner_loop",("Nest.ctrl" "Loop.i")))))), NULL) 
  ( ("ParallelizeLoop" "PipelineLoop"),"BlockLoops",
      (NULL,("ifx",("trace_ivars",("xform","private","")))),
      NULL, NULL,NULL) 
  ("BlockLoops","UnrollLoop",
      (NULL,("ifx",("cleanup",("literal",0, "")))),
      NULL, NULL,NULL) 
  ("BlockLoops","UnrollJam", 
      (NULL,("ifx", ("cleanup",("literal",0,"")))),
      NULL, NULL,NULL) 
  ( ("BlockLoops" "UnrollJam" "UnrollLoop"),("ParallelizeLoop" "PipelineLoop"),
      NULL, 
      ("*",("BlockLoops",(
        ("target",("ifx","target",""))
        ("inner_loop",("ifx","target","Nest.body"))
        ("factor",("ifx","factor",""))))),
      ("*",("TraceNestedLoops",(
        ("target",("ifx","target","Nest.body"))
        ("inner_loops",("xform","target",""))))),
      "same_target"
    )
  ( "CleanupBlockedNests",("ParallelizeLoop" "PipelineLoop"), NULL, 
      ("*",("BlockLoops",(
        ("target",("ifx","target",NULL))
        ("inner_loop",("ifx","target","Nest.body"))
        ("factor",("ifx","factor",NULL))
      ))),
      ("*",("TraceNestedLoops",(
        ("target",("ifx","target","Nest.body"))
        ("inner_loops",("xform","target",""))))), 
      "same_target")
  ("BlockLoops",("UnrollJam" "ScalarRepl" "UnrollLoop"), NULL, 
      ("*",("TraceNestedLoops",(
        ("target",("xform","inner_loop",""))
        ("inner_loops",("group_list","ifx","target"))
        ("report_err",("literal",0,""))
        ("orig_nested",("literal", 1, ""))))), NULL, NULL)
) />

<*  Groups *>
<define xform_groups_table MAP{
  "cleanup" => (("CleanupBlockedNests") 3),
  "group1" => (("UnrollJam" "ScalarRepl" "UnrollLoop") 1),
  "group2" => (("BlockLoops" "CopyRepl") 2),
  "group3" => (("ParallelizeLoop" "PipelineLoop" "SkewLoops") 4) 
} />

<* Defines how to configure a given type of configurable. 
 * the format is: 
 **** "configureable" => ("type of configuration" <specifications of configuration> *>
<define configuration_table MAP {
	"target_tracing_handle"		=> 
		("xform","EraseTraceHandle",(
			("target",("literal","inputCode"))
			("inner_loop",("nest",""))
			("repl",("last_tth","")))) } />

<define error_log NULL />
<define num_precedences_supported 10 />
<define GROUP_PRECEDENCES 4 />
