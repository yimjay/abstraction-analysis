include utils.incl

<define PARSE CODE.MapInput />
<define UNPARSE CODE.MapInput />

<code MapInput pars=(input:CODE.AllMaps)>
<********************************************************************>
<*	This file is automatically generated from groups.txt, 			*>
<* interferences.txt, and transformations.txt. Do not modify this	*>
<* file. If something happens to this file and it no longer works,	*>
<* regenerate it by running `make tables` in the poet_translator 	*>
<* directory. If you want to change any of these values, modify 	*>
<* groups.txt, interferences.txt, or transformations.txt. The 		*>
<* instructions for doing so are in each of the corresponding files.*>
<********************************************************************>

@input@
</code>

<code AllMaps pars=(transformations:LIST(CODE.MapTransformation, ",\n\t"), parameters:LIST(CODE.MapParameter, ",\n\t"), interferences:LIST(CODE.MapInterference, ",\n\t"), groups:LIST(CODE.MapGroup, ",\n\t"), num_xform_precedences, num_group_precedences)>
<*	Transformations *>
<define transformations_table MAP{
	@transformations@
} />

<*	Parameters *>
<define transformation_parameter_table MAP{
	@parameters@
} />

<*	Interferences *>
<define interference_table MAP{
	@interferences@
} />

<*	Groups *>
<define xform_groups_table MAP{
	@groups@ 
} />

<define num_precedences_supported @num_xform_precedences@ />
<define GROUP_PRECEDENCES @num_group_precedences@ />

</code>

<code MapGroup pars=(name, transformations, precedence) >
"@name@" => ((@transformations@) @precedence@)
</code>

<code MapInterference pars=(xform, ifx, if_parameters, configurations:LIST(CODE.MapInterferenceParameterConfiguration, " "), before, after) >
("@xform@" "@ifx@") => (
		(
			(@if_parameters@)
			@((car(configurations)=="")?"\"":"(")@@configurations@@((car(configurations)=="")?"\"":" \"\")")@ 	
			@((car(before)=="")?"\"":"(")@@before@@((car(before)=="")?"\"":" \"\")")@ 
			@((car(after)=="")?"\"":"(")@@after@@((car(after)=="")?"\"":" \"\")")@ 
	
		) "")
</code>

<code MapInterferenceTransformation pars=(name, parameters:LIST(CODE.MapInterferenceParameter, "\n\t\t\t\t")) >
("*" "@name@" (
				@parameters@
			))
</code>

<code MapInterferenceParameterConfiguration pars=(used_transformation, param_info) >
("" "@used_transformation@" (
				@param_info@ ""
			)) 
</code>

<code MapInterferenceParameter pars=(name, info, accessor) >
("@name@" @info@ "@accessor@" )
</code>

<code MapInterferenceParameterInfo pars=(type, name, info) >
("@type@" "@name@" "@info@")
</code>

<code InterferenceParameters pars=(parameters) >
@parameters@
</code>

<code MapTransformation pars=(name, required_params:CODE.IDList, optional_params:CODE.IDList, tuning_params:CODE.IDList, tracing_handles, precedence) >
"@name@" => (@((car(required_params)!="")?"(":"\"")@@required_params@@((car(required_params)!="")?")":"\"")@ @((car(optional_params)!="")?"(":"\"")@@optional_params@@((car(optional_params)!="")?")":"\"")@ @((car(tuning_params)!="")?"(":"\"")@@tuning_params@@((car(tuning_params)!="")?")":"\"")@ @((car(tracing_handles)!="")?"(":"\"")@@tracing_handles@@((car(tracing_handles)!="")?((cdr(tracing_handles)=="")?" \"\"":""):"")@@((car(tracing_handles)!="")?")":"\"")@ @((car(precedence)!="")?precedence:"\"\"")@)
</code>

<code MapParameter pars=(transformation, parameter, type, requirements:CODE.IDList|CODE.IntegerList, default_value:INT|CODE.QuotedID, grouped) >
("@transformation@" "@parameter@") => ("@type@" @requirements@ @((car(default_value)=="")?"\"\"":"")@@default_value@ "@grouped@")
</code>

<code MapTracingHandle pars=(parameter, type, info, macro) >
("@parameter@" ("@type@" "@info@" "@macro@"))
</code>

<code IDList pars=(ids:LIST(CODE.QuotedID, " ")) >
@ids@
</code>

<code Accessor pars=(before, after) >
@before@.@after@
</code>

<code IntegerList pars=(ints:LIST(INT, " ")) >
(@ints@)
</code>

<code QuotedID pars=(id:ID|CODE.Accessor)>
"@id@"
</code>
