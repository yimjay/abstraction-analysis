include opt.pi

<parameter inputFile message="input file name"/>
<parameter outputFile  message="output file name"/>
<parameter tp1 type=1.._ default="MACRO" message="number of threads to parallelize loop Nest2" />
<parameter tp2 type=1.._ default="MACRO" message="number of loop iterations to run by different threads for Nest2" />
<parameter tp3 type=INT default="MACRO" message="Blocking factor for loop nest Nest2" />
<trace inputCode />
<trace Nest1,Nest2,Nest3,Nest4 />


<input from=inputFile syntax="Cfront.code" to=inputCode />

<trace Nest4_group2 = (Nest4) />
<trace Nest2_group2 = (Nest2) />
<trace Nest2_cleanup = (Nest2_group2) />
<trace Nest2_group3 = (Nest2_cleanup) />
<trace Nest2_ParallelizeLoop_private_th1 = (("k" "j" "i")) />

<trace _decl1="" />
<eval EraseTraceHandle[repl=(_decl1 Nest1)](Nest1, inputCode); />
<define TRACE_DECL _decl1 />
<define TRACE_INCL inputCode/>
<define TRACE_TARGET inputCode />

<define TRACE_VARS (Nest2_ParallelizeLoop_private_th1) />

<eval EraseTraceHandle[repl=Nest4_group2](Nest4,inputCode);
	EraseTraceHandle[repl=Nest2_group3](Nest2,inputCode);
	BlockLoops[factor=tp2](Nest2_group3[Nest.body],Nest2_group3);
	ParallelizeLoop[factor=tp2;threads=tp1;private=Nest2_ParallelizeLoop_private_th1](Nest2_group3);
	TraceNestedLoops(Nest2_group2,Nest2_group3[Nest.body]);
	TraceNestedLoops(Nest2_cleanup,Nest2_group3[Nest.body]);
	BlockLoops[factor=tp3;trace_ivars=Nest2_ParallelizeLoop_private_th1](Nest4_group2[Nest.body],Nest2_group2);
	CleanupBlockedNests(Nest2_cleanup); />

<output to=outputFile syntax="Cfront.code" from=inputCode /> 