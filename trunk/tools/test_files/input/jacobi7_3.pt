include opt.pi

<parameter inputFile message="input file name"/>
<parameter outputFile  message="output file name"/>
<parameter tp1 type=INT default=(8 32 32) message="Blocking factor for loop nest Nest2" />
<parameter tp2 type=1.._ default=(16) message="number of times to skew loop Nest1" />
<parameter tp3 type=1.._ default="MACRO" message="number of threads to parallelize loop Nest1" />
<parameter tp4 type=1.._ default="MACRO" message="number of loop iterations to run by different threads for Nest1" />
<trace inputCode />
<trace Nest1,Nest2,Nest3,Nest4 />


<input from=inputFile syntax="Cfront.code" to=inputCode />

<trace Nest4_group2 = (Nest4) />
<trace Nest2_group2 = (Nest2) />
<trace Nest2_cleanup = (Nest2_group2) />
<trace Nest2_group3 = (Nest2_cleanup) />
<trace Nest1_group3 = (Nest1) />
<trace Nest1_ParallelizeLoop_private_th1 = (("t" "k" "j" "i" "l0" "lnext")) />

<trace _decl1="" />
<eval Nest1_decl=Nest1;
      if (Nest1 : CODE.FunctionDecl) 
          Nest1_decl=Nest1[FunctionDecl.body][StmtBlock.stmts];
      else Nest1_decl = Nest1;
      EraseTraceHandle[repl=(_decl1 Nest1_decl)](Nest1_decl, inputCode); />
<define TRACE_DECL _decl1 />
<define TRACE_INCL inputCode/>
<define TRACE_TARGET inputCode />

<define TRACE_VARS (Nest1_ParallelizeLoop_private_th1) />

<eval EraseTraceHandle[repl=Nest4_group2](Nest4,inputCode);
	EraseTraceHandle[repl=Nest2_group3](Nest2,inputCode);
	EraseTraceHandle[repl=Nest1_group3](Nest1,inputCode);
	BlockLoops[factor=tp1;trace_ivars=Nest1_ParallelizeLoop_private_th1](Nest4_group2[Nest.body],Nest2_group2);
	SkewLoops[factor=tp2](Nest2_group3,Nest1_group3);
	REPLACE(Nest2_group3[Nest.ctrl][Loop.i],"",Nest1_ParallelizeLoop_private_th1);
	ParallelizeLoop[factor=tp4;threads=tp3;private=Nest1_ParallelizeLoop_private_th1](Nest1_group3);
	CleanupBlockedNests(Nest2_cleanup); />

<output to=outputFile syntax="Cfront.code" from=inputCode /> 