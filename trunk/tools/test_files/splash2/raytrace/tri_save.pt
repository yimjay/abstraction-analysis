include opt.pi

<parameter inputFile message="input file name"/>
<parameter outputFile  message="output file name"/>

<trace inputCode />

<trace Stmt1,Stmt2,Stmt3,Stmt4,Stmt5,Stmt6,Stmt7,Stmt8,Stmt9,Stmt10,Stmt11,Stmt12,Stmt13,Stmt14,Stmt15,Stmt16,Stmt17,Stmt18,Stmt19,Stmt20,Stmt21,Stmt22,Stmt23,Stmt24,Stmt25,Stmt26 />
<trace Func1 />
<input from=inputFile syntax="Cfront.code" to=inputCode />

<trace Func1_group1 = (Func1) />
<trace Func1_ScalarRepl_aref_th9 = (CODE.ArrayAccess#(CODE.Uop#("*", "v1"),0)) />
<trace Func1_ScalarRepl_aref_th8 = (CODE.ArrayAccess#(CODE.Uop#("*", "v1"),1)) />
<trace Func1_ScalarRepl_aref_th7 = (CODE.ArrayAccess#(CODE.Uop#("*", "v1"),2)) />
<trace Func1_ScalarRepl_aref_th6 = (CODE.ArrayAccess#(CODE.Uop#("*", "v2"),0)) />
<trace Func1_ScalarRepl_aref_th5 = (CODE.ArrayAccess#(CODE.Uop#("*", "v2"),1)) />
<trace Func1_ScalarRepl_aref_th4 = (CODE.ArrayAccess#(CODE.Uop#("*", "v2"),2)) />
<trace Func1_ScalarRepl_aref_th3 = (CODE.ArrayAccess#(CODE.Uop#("*", "v3"),0)) />
<trace Func1_ScalarRepl_aref_th2 = (CODE.ArrayAccess#(CODE.Uop#("*", "v3"),1)) />
<trace Func1_ScalarRepl_aref_th1 = (CODE.ArrayAccess#(CODE.Uop#("*", "v3"),2)) />

<trace _decl1="" />
<eval Func1_decl=Func1;
      if (Func1 : CODE.FunctionDecl) 
          Func1_decl=Func1[FunctionDecl.body][StmtBlock.stmts];
      else Func1_decl = Func1;
      EraseTraceHandle[repl=(_decl1 Func1_decl)](Func1_decl, inputCode); />
<define TRACE_DECL _decl1 />
<define TRACE_INCL inputCode/>
<define TRACE_TARGET inputCode />

<define TRACE_EXP (Func1_ScalarRepl_aref_th9 Func1_ScalarRepl_aref_th8 Func1_ScalarRepl_aref_th7 Func1_ScalarRepl_aref_th6 Func1_ScalarRepl_aref_th5 Func1_ScalarRepl_aref_th4 Func1_ScalarRepl_aref_th3 Func1_ScalarRepl_aref_th2 Func1_ScalarRepl_aref_th1) />

<eval EraseTraceHandle[repl=Func1_group1](Func1,inputCode);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt18 Stmt24)](Func1_ScalarRepl_aref_th9,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt12 Stmt24)](Func1_ScalarRepl_aref_th8,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt12 Stmt18)](Func1_ScalarRepl_aref_th7,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt16 Stmt22)](Func1_ScalarRepl_aref_th6,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt10 Stmt22)](Func1_ScalarRepl_aref_th5,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt10 Stmt16)](Func1_ScalarRepl_aref_th4,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt16 Stmt22)](Func1_ScalarRepl_aref_th3,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt10 Stmt22)](Func1_ScalarRepl_aref_th2,(""),Func1_group1[FunctionDecl.body]);
	ScalarRepl[data_type="REAL";init=1;save=0;scalar_num=1;init_loc=(Stmt10 Stmt16)](Func1_ScalarRepl_aref_th1,(""),Func1_group1[FunctionDecl.body]);
	RedundancyElimination[used_place=(Stmt20 Stmt26)](4,Stmt1);
	RedundancyElimination[used_place=(Stmt14 Stmt26)](4,Stmt2);
	RedundancyElimination[used_place=(Stmt14 Stmt20)](4,Stmt3);
	RedundancyElimination[used_place=(Stmt16 Stmt22)](4,Stmt4);
	RedundancyElimination[used_place=(Stmt10 Stmt22)](4,Stmt5);
	RedundancyElimination[used_place=(Stmt10 Stmt16)](4,Stmt6);
	RedundancyElimination[used_place=(Stmt18 Stmt24)](4,Stmt7);
	RedundancyElimination[used_place=(Stmt12 Stmt24)](4,Stmt8);
	RedundancyElimination[used_place=(Stmt12 Stmt18)](4,Stmt9); />

<output to=outputFile syntax="Cfront.code" from=inputCode /> 